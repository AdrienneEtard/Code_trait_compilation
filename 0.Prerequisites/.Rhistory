if (any(Elton[i, "Diet.Inv"]!=0, na.rm=T)) {Elton$IN[i] <- 1}
if (any(Elton[i, "Diet.Scav"]!=0, na.rm=T)) {Elton$SCV[i] <- 1}
if (any(Elton[i, "Diet.Fruit"]!=0, na.rm=T)) {Elton$FR[i] <- 1}
if (any(Elton[i, "Diet.Nect"]!=0, na.rm=T)) {Elton$NE[i] <- 1}
if (any(Elton[i, "Diet.Seed"]!=0, na.rm=T)) {Elton$SE[i] <- 1}
if (any(Elton[i, "Diet.PlantO"]!=0, na.rm=T)) {Elton$PL[i] <- 1}
if (i==157) {browser()}
if (any(Elton[i, Diet], na.rm=TRUE)) {
ToPaste <- Diet[which(Elton[i, c("FR", "NE", "SE", "PL", "IN", "VE", "SCV")]==1)]
Elton$Primary_diet[i] <- paste(ToPaste, collapse = "|")} else {
Elton$Primary_diet[i] <- NA
}
Elton[, Diet] <- apply(Elton[, Diet], 2, as.numeric)
# trophic levels
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==T & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==F) {Elton$Trophic_level[i] <- "Herbivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==F & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==T) {Elton$Trophic_level[i] <- "Carnivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==T & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==T) {Elton$Trophic_level[i] <- "Omnivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==F & any(Elton[i, c("IN", "VE")], na.rm=T)==F) {Elton$Trophic_level[i] <- NA}
print(i)
}
Elton$Diet_breadth <- apply(Elton[, Diet], 1, sum, na.rm=T)
Elton$Diet_breadth[Elton$Diet_breadth==0] <- NA
return(Elton)
}
Elton_birds <- Process_Elton_diet(Elton_birds)
Elton_mammals <- Process_Elton_diet(Elton_mammals)
# Function to transform diet variable into binary (used inside the Imputations_missForest function)
Diet_as_binary <- function(DF) {
D <- DF %>% select(IN, VE, PL, SE, NE, FR, SCV)
for (i in 1:nrow(D)) {
if(any(D[i,]==1, na.rm = TRUE)) {
Col <- which(is.na(D[i,]))
D[i, Col] <- 0}
else{next()}
print(i)
}
DF[, c("IN", "VE", "PL", "SE", "NE", "FR", "SCV")] <- D
return(DF)
}
View(Elton_birds)
View(Elton_mammals)
#  -----------------------------------------------------------------------
# Elton trait diet
Process_Elton_diet <- function(Elton){
Diet <- c("FR", "NE", "SE", "PL", "IN", "VE", "SCV")
Elton[, Diet] <- NA
for (i in 1:nrow(Elton)) {
if (any(Elton[i, c("Diet.Vunk", "Diet.Vend", "Diet.Vect", "Diet.Vfish")]!=0, na.rm=T)) {Elton$VE[i] <- 1}
if (any(Elton[i, "Diet.Inv"]!=0, na.rm=T)) {Elton$IN[i] <- 1}
if (any(Elton[i, "Diet.Scav"]!=0, na.rm=T)) {Elton$SCV[i] <- 1}
if (any(Elton[i, "Diet.Fruit"]!=0, na.rm=T)) {Elton$FR[i] <- 1}
if (any(Elton[i, "Diet.Nect"]!=0, na.rm=T)) {Elton$NE[i] <- 1}
if (any(Elton[i, "Diet.Seed"]!=0, na.rm=T)) {Elton$SE[i] <- 1}
if (any(Elton[i, "Diet.PlantO"]!=0, na.rm=T)) {Elton$PL[i] <- 1}
if (any(Elton[i, Diet], na.rm=TRUE)) {
ToPaste <- Diet[which(Elton[i, c("FR", "NE", "SE", "PL", "IN", "VE", "SCV")]==1)]
Elton$Primary_diet[i] <- paste(ToPaste, collapse = "|")} else {
Elton$Primary_diet[i] <- NA
}
Elton[, Diet] <- apply(Elton[, Diet], 2, as.numeric)
# trophic levels
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==T & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==F) {Elton$Trophic_level[i] <- "Herbivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==F & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==T) {Elton$Trophic_level[i] <- "Carnivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==T & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==T) {Elton$Trophic_level[i] <- "Omnivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==F & any(Elton[i, c("IN", "VE")], na.rm=T)==F) {Elton$Trophic_level[i] <- NA}
print(i)
}
Elton$Diet_breadth <- apply(Elton[, Diet], 1, sum, na.rm=T)
Elton$Diet_breadth[Elton$Diet_breadth==0] <- NA
return(Elton)
}
Elton_mammals <- Process_Elton_diet(Elton_mammals)
View(Elton_mammals)
Diet_as_binary <- function(DF) {
D <- DF %>% select(IN, VE, PL, SE, NE, FR, SCV)
for (i in 1:nrow(D)) {
if(any(D[i,]==1, na.rm = TRUE)) {
Col <- which(is.na(D[i,]))
D[i, Col] <- 0}
else{next()}
print(i)
}
DF[, c("IN", "VE", "PL", "SE", "NE", "FR", "SCV")] <- D
return(DF)
}
Amphibio <- Diet_as_binary(Amphibio)
MammalDIET <- Diet_as_binary(MammalDIET)
Elton_birds <- Diet_as_binary(Elton_birds)
Elton_mammals <- Diet_as_binary(Elton_mammals)
View(Amphibio)
View(MammalDIET)
## Rearrange columns
MammalDIET <- MammalDIET[, c(1:35, 38, 36, 37)]
# Save files --------------------------------------------------------------
write.csv(Amphibio, "../../Results/0.Processed_diet_datasets/Amphibio_processed_diet.csv", row.names = F)
write.csv(MammalDIET, "../../Results/0.Processed_diet_datasets/MammalDIET_processed_diet.csv", row.names = F)
View(Elton_birds)
View(Elton_mammals)
write.csv(Amphibio, "../../Results/0.Processed_diet_datasets/Amphibio_processed_diet.csv", row.names = F)
write.csv(MammalDIET, "../../Results/0.Processed_diet_datasets/MammalDIET_processed_diet.csv", row.names = F)
write.csv(Elton_birds, "../../Results/0.Processed_diet_datasets/Elton_birds_processed.csv", row.names = F)
write.csv(Elton_mammals, "../../Results/0.Processed_diet_datasets/Elton_mammals_processed.csv", row.names = F)
source('~/PhD/PhD_analyses/1.Trait_compilation/Code/0.Prerequisites/0.7.Process_diet_information_NO_TAXONOMIC_CORRECTION.R', echo=TRUE)
MammalDIET$SCV <- NA
MammalDIET <- Diet_as_binary(MammalDIET)
write.csv(Amphibio, "../../Data/Amphibians/Amphibio_processed_diet.csv", row.names = F)
#write.csv(Sekercioglu, "../../Results/0.Processed_diet_datasets/Sekercioglu_processed_diet.csv", row.names = F)
write.csv(MammalDIET, "../../Data/Mammals/MammalDIET_processed_diet.csv", row.names = F)
write.csv(Elton_birds, "../../Data/Birds/Elton_birds_processed.csv", row.names = F)
write.csv(Elton_mammals, "../../Data/Mammals/Elton_mammals_processed.csv", row.names = F)
## Load files
Syn_Mammals <- read.csv("../../Results/0.Data_resolved_taxonomy/List_species_synonyms/After_manual_checks/Mammals_with_elton.csv")
Syn_Amphibians <- read.csv("../../Results/0.Data_resolved_taxonomy/List_species_synonyms/After_manual_checks/Amphibians.csv")
Syn_Mammals <- read.csv("../../Results/0.Data_resolved_taxonomy/List_species_synonyms/Synonym_final_datasets/Mammals.csv")
Syn_Birds <- read.csv("../../Results/0.Data_resolved_taxonomy/List_species_synonyms/Synonym_final_datasets/Birds.csv")
Syn_Reptiles <- read.csv("../../Results/0.Data_resolved_taxonomy/List_species_synonyms/Synonym_final_datasets/Reptiles.csv")
Syn_Amphibians <- read.csv("../../Results/0.Data_resolved_taxonomy/List_species_synonyms/Synonym_final_datasets/Amphibians.csv")
length(unique(Syn_Mammals$Original)) - length(unique(Syn_Mammals$Accepted))
print(paste(length(unique(Syn_Mammals$Original)) - length(unique(Syn_Mammals$Accepted)), "for mammals"))
print("Differences in species number across all compiled names:")
print(paste(length(unique(Syn_Mammals$Original)) - length(unique(Syn_Mammals$Accepted)), "for mammals"))
print(paste(length(unique(Syn_Birds$Original)) - length(unique(Syn_Birds$Accepted)), "for birds"))
print(paste(length(unique(Syn_Amphibians$Original)) - length(unique(Syn_Amphibians$Accepted)), "for amphibians"))
print(paste(length(unique(Syn_Reptiles$Original)) - length(unique(Syn_Reptiles$Accepted)), "for reptiles"))
print("Differences in species number across all compiled names after all taxonomic correction:")
print(paste(length(unique(Syn_Mammals$Original)) - length(unique(Syn_Mammals$Accepted)), "for mammals"))
print(paste(length(unique(Syn_Birds$Original)) - length(unique(Syn_Birds$Accepted)), "for birds"))
print(paste(length(unique(Syn_Amphibians$Original)) - length(unique(Syn_Amphibians$Accepted)), "for amphibians"))
print(paste(length(unique(Syn_Reptiles$Original)) - length(unique(Syn_Reptiles$Accepted)), "for reptiles"))
print(paste(length(unique(Syn_Mammals$Original)) - length(unique(Syn_Mammals$CorrectedTypos)), "for mammals"))
print(paste(length(unique(Syn_Birds$Original)) - length(unique(Syn_Birds$CorrectedTypos)), "for birds"))
print(paste(length(unique(Syn_Amphibians$Original)) - length(unique(Syn_Amphibians$CorrectedTypos)), "for amphibians"))
print(paste(length(unique(Syn_Reptiles$Original)) - length(unique(Syn_Reptiles$CorrectedTypos)), "for reptiles"))
print("Differences in species number across all compiled names after correcting for typos and extracting synonyms:")
print(paste(length(unique(Syn_Mammals$Accepted)) - length(unique(Syn_Mammals$CorrectedTypos)), "for mammals"))
print(paste(length(unique(Syn_Birds$Accepted)) - length(unique(Syn_Birds$CorrectedTypos)), "for birds"))
print(paste(length(unique(Syn_Amphibians$Accepted)) - length(unique(Syn_Amphibians$CorrectedTypos)), "for amphibians"))
print(paste(length(unique(Syn_Reptiles$Accepted)) - length(unique(Syn_Reptiles$CorrectedTypos)), "for reptiles"))
TableMammals <- Syn_Mammals %>%
group_by(Accepted) %>%
summarise(Count=n())
## Taxonomic corrections: quick overview
library(dplyr)
TableMammals <- Syn_Mammals %>%
group_by(Accepted) %>%
summarise(Count=n())
View(TableMammals)
TableMammals <- Syn_Mammals %>%
filter(Accepted!="")
View(TableMammals)
TableMammals <- Syn_Mammals %>%
filter(Accepted!="") %>%
group_by(Accepted) %>%
summarise(Count=n())
View(TableMammals)
TableMammals <- Syn_Mammals %>%
filter(Accepted!="") %>%
group_by(Accepted) %>%
summarise(Count=n()) %>%
select(max)
TableMammals <- Syn_Mammals %>%
filter(Accepted!="") %>%
group_by(Accepted) %>%
summarise(Count=n()) %>%
filter(Count=max(Count))
TableMammals <- Syn_Mammals %>%
filter(Accepted!="") %>%
group_by(Accepted) %>%
summarise(Count=n()) %>%
filter(Count=max())
TableMammals <- Syn_Mammals %>%
filter(Accepted!="") %>%
group_by(Accepted) %>%
summarise(Count=n())
MaxMammals <- TableMammals$Accepted[max(TableMammals$Count)]
MaxMammals
max(TableMammals$Count)
MaxMammals <- TableMammals$Accepted[TableMammals$Count==max(TableMammals$Count)]
max(TableMammals$Count)
TableMammals$Count
TableMammals <- Syn_Mammals %>%
filter(Accepted!="") %>%
group_by(Accepted) %>%
summarise(Count=n())
TableMammals$Accepted[TableMammals$Count==max(TableMammals$Count)]
MaxMammals <- TableMammals$Accepted[TableMammals$Count==max(TableMammals$Count)]
MaxMammals
Syn_Mammals$CorrectedTypos[Syn_Mammals$Accepted==MaxMammals]
MaxSyn <- function(Syn) {
Table <- Syn %>%
filter(Accepted!="") %>%
group_by(Accepted) %>%
summarise(Count=n())
Max <- Table$Accepted[Table$Count==max(Table$Count)]
All <- Syn$CorrectedTypos[Syn$Accepted==Max]
return(list(Accepted=Max, Replicates=All))
}
# For mammals: Tachyoryctes splendens appeared under 12 different names
Mammals <- MaxSyn(Syn_Mammals)
Mammals
Birds <- MaxSyn(Syn_Birds)
Birds
Reptiles <- MaxSyn(Syn_Reptiles)
Reptiles
Amphibians <- MaxSyn(Syn_Amphibians)
Amphibians
X <- c("grid", "gridExtra", "ggpubr", "dplyr", "lattice", "stringr")
invisible(lapply(X, library, character.only=TRUE)); rm(X)
IUCN_mammal <- read.csv("../../../1.Trait_compilation/Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/IUCN_habitat_mammals.csv")
IUCN_amphibian <- read.csv("../../../1.Trait_compilation/Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/IUCN_habitat_amphibians.csv")
IUCN_bird <- read.csv("../../../1.Trait_compilation/Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/IUCN_habitat_birds.csv")
IUCN_reptile <- read.csv("../../../1.Trait_compilation/Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/IUCN_habitat_reptiles.csv")
IUCN_amphibian$Best_guess_binomial %<>% as.character()
IUCN_mammal$Best_guess_binomial %<>% as.character()
IUCN_bird$Best_guess_binomial %<>% as.character()
IUCN_reptile$Best_guess_binomial %<>% as.character()
View(IUCN_mammal)
View(IUCN_bird)
source('~/PhD/PhD_analyses/1.Trait_compilation/Code/0.Prerequisites/0.6.IUCN_Habitat_classification.R', echo=TRUE)
View(Habitat_amphibian)
View(Habitat_bird)
View(Habitat_reptile)
View(Habitat_mammal)
IUCN_Habitat_calc <- function(IUCN_Habitat, w_suitable_important, w_suitable, w_marginal, w_unknown) {
Species <- unique(IUCN_Habitat$Best_guess_binomial) %>% as.data.frame()
colnames(Species) <- "Best_guess_binomial"
for (i in 1:nrow(Species)) {
if(Species$Best_guess_binomial[i]=="Canis adustus") {browser()}
# Calculation of Habitat breadth
s <- subset(IUCN_Habitat, Best_guess_binomial==Species$Best_guess_binomial[i])
Breadth_suitable_important <- nrow(s[s$Suitability=="Suitable" & s$Major.importance=="Yes",]) * w_suitable_important
Breadth_suitable <- nrow(s[s$Suitability=="Suitable" & (s$Major.importance=="No" | is.na(s$Major.importance)),]) * w_suitable
Breadth_unknown <- nrow(s[s$Suitability=="Unknown",]) * w_unknown
Breadth_NA <- nrow(s[is.na(s$Suitability),]) * w_unknown
Breadth_empty <- nrow(s[s$Suitability=="",]) * w_unknown
Breadth_marginal <- nrow(s[s$Suitability=="Marginal",]) * w_marginal
Species$Habitat_breadth_IUCN[i] <- Breadth_suitable_important + Breadth_suitable + Breadth_unknown + Breadth_NA + Breadth_empty + Breadth_marginal
# Assigning a specialisation on Natural habitats (if no artificial habitats are suitable)
if(any(s$Affinity=="Artificial" & s$Suitability=="Suitable", na.rm=T)==T) {
Species$Specialisation[i] <- "Generalist"} else {
Species$Specialisation[i] <- "Natural habitat specialist"}
}
return(Species)
}
Habitat_mammal <- IUCN_Habitat_calc(IUCN_mammal, 1, 0.8, 0.3, 0.8)
View(s)
Species$Best_guess_binomial[i]
View(IUCN_Habitat)
IUCN_mammal <- read.csv("../../../1.Trait_compilation/Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/IUCN_habitat_mammals.csv")
IUCN_amphibian <- read.csv("../../../1.Trait_compilation/Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/IUCN_habitat_amphibians.csv")
IUCN_bird <- read.csv("../../../1.Trait_compilation/Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/IUCN_habitat_birds.csv")
IUCN_reptile <- read.csv("../../../1.Trait_compilation/Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/IUCN_habitat_reptiles.csv")
View(IUCN_amphibian)
X <- c("dplyr", "taxize", "phytools", "stringr", "rredlist", "stringdist", "plyr", "pbapply", "GlobalOptions", "data.table", "ngram")
lapply(X, library, character.only=TRUE); rm(X)
`%nin%` = Negate(`%in%`)
opt <- options(iucn_redlist_key="ba30954f38deda075bd9b52495d65092ccf1b220b0c7c67a41465646e50ef72c")
source("Resolve_taxonomy_functions.R")
## Load synonym datasets
Syn_Mammals <- read.csv("../../Results/0.Data_resolved_taxonomy/List_species_synonyms/Synonym_final_datasets/Mammals.csv")
Syn_Birds <- read.csv("../../Results/0.Data_resolved_taxonomy/List_species_synonyms/Synonym_final_datasets/Birds.csv")
Syn_Reptiles <- read.csv("../../Results/0.Data_resolved_taxonomy/List_species_synonyms/Synonym_final_datasets/Reptiles.csv")
Syn_Amphibians <- read.csv("../../Results/0.Data_resolved_taxonomy/List_species_synonyms/Synonym_final_datasets/Amphibians.csv")
## Load datasets
Predicts <-  readRDS("../../Data/PREDICTS_database.rds")
Predicts <- subset(Predicts, Class %in% c("Aves", "Amphibia", "Mammalia", "Reptilia"))
Predicts$Best_guess_binomial <- as.character(Predicts$Best_guess_binomial)
# Non identifiable species
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Duellmanohyla eutisanota"] <- ""
# Phylogenies
PhyloMammal <- read.newick("../../Data/Mammals/Phylogenies/TTOL_mammals_smoothed_interpolated.nwk") %>% .Format_tiplabels()
PhyloAmphibian <- read.newick("../../Data/Phylogenies/TTOL_amphibians_unsmoothed_Hedges2015.nwk") %>% .Format_tiplabels()
PhyloBird <- read.newick("../../Data/Phylogenies/TTOL_birds_smoothed_interpolated_Hedges2015.nwk") %>% .Format_tiplabels()
PhyloReptile <- read.newick("../../Data/Phylogenies/TTOL_squamates_unsmoothed_Hedges2015.nwk") %>% .Format_tiplabels()
# Traits
Myhrvold <- read.csv("../../Data/Amniotes_Myhrvold_2015/Amniote_Database_Aug_2015.csv", sep=",")
Myhrvold$Binomial_name <- paste(Myhrvold$genus, Myhrvold$species, sep=" ")
MyhrvoldMammal <- subset(Myhrvold, class=="Mammalia")
MyhrvoldBird <- subset(Myhrvold, class=="Aves")
MyhrvoldReptile <- subset(Myhrvold, class=="Reptilia")
Pantheria <- read.csv("../../Data/Mammals/PanTHERIA/Pantheria_1_0_WR05_Aug2008.csv", sep=",")
Pacifici <- read.csv("../../Data/Mammals/PacificiMammals.csv", sep=",")
## Put mammalian diet information together
Kissling <- read.csv("../../Data/Mammals/Kissling_Mammal_diet_2014.csv", sep=",")
Kissling$Binomial_name <- paste(Kissling$Genus, Kissling$Species, sep=" ")
Kissling <- subset(Kissling, Binomial_name != "Mico sp. nov.")
Kissling <- Kissling %>% select(-TaxonID, -TaxonomicNote, -FillCode)
Kissling <- Kissling[, c(28, 1:27)]
MammalDIET2 <- read.csv("../../Data/Mammals/MammalDIET_2/MammalDIET2.csv")[, c(1:28)]
colnames(MammalDIET2)[28] <- "DataSource"
MammalDIET2_supp <- read.csv("../../Data/Mammals/MammalDIET_2/MammalDIET_2_supp.csv")
MammalDIET2_supp$TrophicLevel %<>% as.character()
MammalDIET2_supp <- MammalDIET2_supp %>%
mutate(TrophicLevel=ifelse(TrophicLevel %in% c("Carnivore", "Omnivore", "Herbivore"), TrophicLevel, NA)) %>%
filter(!is.na(TrophicLevel)) %>%
mutate(Mammal=ifelse(Mammal %in% c(0:3), Mammal, NA)) %>%
mutate(MammalEater=ifelse(MammalEater %in% c(0:3), MammalEater, NA)) %>%
mutate(Insectivore=ifelse(Insectivore %in% c(0:3), Insectivore, NA))%>%
mutate(Frugivore=ifelse(Frugivore %in% c(0:3), Frugivore, NA))%>%
mutate(Granivore=ifelse(Granivore %in% c(0:3), Granivore, NA)) %>%
mutate(Folivore=ifelse(Folivore %in% c(0:3), Folivore, NA))
MammalDIET2_supp[, c(6:27)] %<>% droplevels()
MammalDIET2 <- rbind(MammalDIET2, MammalDIET2_supp)
MammalDIET2$Binomial <- as.character(MammalDIET2$Binomial)
MammalDIET2$Binomial[MammalDIET2$Binomial=="Rhinolophus hildebrandtii"] <- "Rhinolophus hildebrandti"
MammalDIET2$Binomial[MammalDIET2$Binomial=="Tadarida bivittatus"] <- "Tadarida bivittata"
colnames(MammalDIET2)[1] <- "Binomial_name"
Y <- intersect(MammalDIET2$Binomial_name, Kissling$Binomial_name)
Kissling <- Kissling %>% filter(Binomial_name %nin% Y)
MammalDIET <- rbind(Kissling, MammalDIET2) # dataset to use
Butchart_BM <- read.csv("../../Data/Birds/Butchart_BM.csv", sep=",")
Butchart_GL <- read.csv("../../Data/Birds/ButchartGenerationLength.csv", sep=",")
Butchart_GL <- subset(Butchart_GL, Binomial !="")
Sekercioglu_Diet <- read.csv("../../Data/Birds/SekerciogluDiet.csv", sep=",")
Scharf <- read.csv("../../Data/Reptiles/Scharf.csv", sep=",")
Meiri_0 <- read.csv("../../Data/Reptiles/MeiriReptileMasses.csv", sep=",")
Meiri_0 <- subset(Meiri_0, Rank=="Species")
# Reptiles traits to add, a posteriori extract synonyms for species for which it has not been done before
Vidan <- read.csv("../../Data/Reptiles/Vidan2017_Dielactivity.csv")
Stark<- read.csv("../../Data/Reptiles/Stark2018_GEB_longevity.csv")
colnames(Stark)[1] <- "species"
Stark_longevity <- Stark %>%
filter(species !="")
Schwarz <- read.csv("../../Data/Reptiles/Schwarz_Meiri_GEB_2017.csv")
Novosolov <- read.csv("../../Data/Reptiles/Novosolov_2017_GEB.csv") %>%
filter(Taxonomic.group!="Mammals") %>%
filter(Taxonomic.group!="Birds")
Novosolov$Taxonomic.group <- droplevels(Novosolov$Taxonomic.group)
Novosolov_2 <- read.csv("../../Data/Reptiles/Novosolov_GEB_2013.csv")
Slavenko <- read.csv("../../Data/Reptiles/Body_sizes_of_all_extant_reptiles_Slavenko_2016_GEB.csv")
Meiri <- read.csv("../../Data/Reptiles/Meiri_2015_Evolutionary_Biology.csv")
Amphibio <- read.csv("../../Data/Amphibians/AmphiBIO_v1.csv", sep=",")
Amphibio$Species <- as.character(Amphibio$Species)
Amphibio$Species[Amphibio$Species=="Duttaphrynus pariet alis"] <- "Duttaphrynus parietalis"
Cooper <- read.csv("../../Data/Amphibians/Cooper2008.csv", sep=",")
Cooper <- subset(Cooper, Binomial!="")
Senior <- read.csv("../../Data/Amphibians/Senior_svl_data.csv", sep=",")
Senior <- subset(Senior, Rank=="Species")
Bickford <- read.csv("../../Data/Amphibians/Bickford.csv", sep=",")
Bickford$Binomial_name <-  paste(Bickford$Genus, Bickford$Species, sep=" ")
Mammal_range <- read.csv("../../Data/Range_sizes/mammal_range_areas.csv", sep=",")
Amphibian_range <- read.csv("../../Data/Range_sizes/amphibian_range_areas.csv", sep=",")
Bird_range <- read.csv("../../Data/Range_sizes/bird_range_areas.csv", sep=",")
Reptile_range <- read.csv("../../Data/Range_sizes/reptile_range_areas.csv", sep=",")
Reptile_range <- subset(Reptile_range, Binomial_name!="Chelonia mydas Hawaiian subpopulation")
IUCN_mammal <- read.csv("../../Data/HabitatData_09_08_18_IUCN_unprocessed/API_HabitatLevel2_Mammals_20180726.csv", sep=",")
IUCN_amphibian <- read.csv("../../Data/HabitatData_09_08_18_IUCN_unprocessed/API_HabitatLevel2_Amphibians_20180726.csv", sep=",")
IUCN_bird <- read.csv("../../Data/HabitatData_09_08_18_IUCN_unprocessed/API_HabitatLevel2_Birds_20180726.csv", sep=",")
IUCN_reptile <- read.csv("../../Data/HabitatData_09_08_18_IUCN_unprocessed/API_HabitatLevel2_Reptiles_20180726.csv", sep=",")
# Elton traits
Elton_birds <- read.csv("../../Data/Birds/EltonTraits_Birds.csv")
Elton_mammals <- read.csv("../../Data/Mammals/EltonTraits_Mammals.csv")
## Replace vernacular names by scientific names
# Amphibians
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Rana cafe"] <- "Eleutherodactylus maurus"
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Rana hoja"] <- "Noblella lochites"
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Rana hojarasca"] <- "Craugastor angelicus"
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Rana verde"] <- "Lithobates palmipes"
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Arthroleptis sp"] <- ""
# Reptiles
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Serp cafe"] <- "Ninia sebae"
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Serpiente cafe"] <- "Ninia sebae"
# Mammals
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Samango monkey"] <- "Cercopithecus albogularis"
# Birds
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Black backed starling"] <- "Acridotheres melanopterus"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Black backed weaver"] <- "Ploceus bicolor"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Blue rock pigeon"] <- "Columba livia"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Blue whistling thrush"] <- "Myophonus caeruleus"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Brown crested tit"] <- "Lophophanes cristatus"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Chestnut beilled nuthatch"] <- "Sitta cinnamoventris"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Large yellow nape"] <- "Amazona auropalliata"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Common stone chat"] <- "Saxicola torquatus"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Rufous backed shrike"] <- "Lanius schach"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="White breasted forktail"] <- "Enicurus leschenaulti"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="White breasted kingfisher"] <- "Halcyon smyrnensis"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Jungle babbler"] <- "Turdoides striata"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Grey bulbul"] <- "Pycnonotus cyaniventris"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Pied wagtail"] <- "Motacilla alba"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Indian rufous babbler"] <-"Argya subrufa"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Large wagtail"] <- "Motacilla madaraspatensis"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Common swallow"] <- "Hirundo rustica"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Eurasian tree creeper"] <- "Certhia familiaris"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Red headed tit"] <- "Aegithalos iredalei"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Red jungle fowl"] <- "Gallus gallus"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Indian myna"] <-"Acridotheres tristis"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Indian robin"] <- "Saxicoloides fulicatus"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Indian tree pie"] <-"Dendrocitta vagabunda"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Sparrow hawk"] <-"Accipiter nisus"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Creasted bunting"] <-"Emberiza lathami"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Yellow eyed warbler"] <- "Chrysomma sinense"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Canary blue flycatcher"] <- "Eumyias thalassinus"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Hawk booted eagle"] <- "Hieraaetus pennatus"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Yellow backed greenbul"] <- "Chlorocichla flaviventris"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="White piegon"] <- "Columba livia"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Simla crested tit"] <-"Lophophanes dichrous"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Cacomantis esculena"] <- "Collocalia esculenta"
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Bush lark"] <- ""
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Imperial pigeon"] <- ""
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Tailor bird"] <- ""
Predicts$Best_guess_binomial[Predicts$Parsed_name=="Paradise flycatcher"] <- ""
# ## Correct a few noticeable taxonomic errors
Slavenko$Binomial <- Slavenko$Binomial %>% as.character()
Slavenko$Binomial[Slavenko$Binomial=="Chelonoidis nigra (complex)"] <- "Chelonoidis nigra"
# Amphibians
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Kaloula pleurostigma"] <- "Kalophrynus pleurostigma"
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Pristimantis bransfordii"] <- "Craugastor bransfordii"
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Pristimantis fitzingerii"] <-  "Craugastor fitzingeri"
# Reptiles
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Mabuya elegans"] <- "Lygosoma punctata"
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Cryptoblepharus carnabyi"] <- "Cryptoblepharus australis"
# Birds
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Dicaeum maculatus"] <- "Prionochilus maculatus"
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Dicaeum percussus"] <- "Prionochilus percussus"
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="Picoides leucotos"] <- "Dendrocopos leucotos"
# Mammals
Predicts$Best_guess_binomial[Predicts$Best_guess_binomial=="sus scrofa"] <- "Sus scrofa"
# Select data where species known by binomial names
Predicts <- subset(Predicts, Best_guess_binomial != "")
View(IUCN_mammal)
IUCN_mammal <-  Replace_by_accepted_name(Syn_Mammals, IUCN_mammal, "binomial")
View(IUCN_mammal)
table(IUCN_mammal$Best_guess_binomial)
X <- table(IUCN_mammal$Best_guess_binomial)
X <- table(IUCN_mammal$Best_guess_binomial)  %>% as.data.frame()
View(X)
Replace_by_accepted_name <- function(Syn, TargetDF, colnamespecies) {
browser()
Syn$Original <- as.character(Syn$Original)
Syn$Accepted <- as.character(Syn$Accepted)
Syn$CorrectedTypos <- as.character(Syn$CorrectedTypos)
if (class(TargetDF)=="phylo") {
Names <- TargetDF$tip.label %>% unlist
for (i in 1:length(Names)) {
if (!grepl("cf.|sp.", Names[i])) {
TargetDF$tip.label[TargetDF$tip.label==Names[i]] <- Syn$Accepted[Syn$Original==Names[i]]
}
print(i)
}
print(paste("Delta in species number:", length(unique(Names))- length(unique(TargetDF$tip.label))))
} else {
TargetDF[ , colnamespecies] <- as.character(as.factor(TargetDF[ , colnamespecies]))
Names <- TargetDF[ , colnamespecies] %>% unique
for (i in 1:length(Names)) {
if(Names[i]=="Desmodus draculae") {TargetDF$Best_guess_binomial[i] <-"Desmodus draculae"; next()}
if(any(grepl(Names[i], Syn$Original))){
TargetDF$Best_guess_binomial[i] <- Syn$Accepted[Syn$Original==Names[i]]
}
else {
#TargetDF$Best_guess_binomial[TargetDF[ , colnamespecies]==Names[i]] <- Syn$Accepted[Syn$CorrectedTypos==Names[i]]
TargetDF$Best_guess_binomial[i] <- Syn$Accepted[Syn$CorrectedTypos==Names[i]]
}
# print(i)
}
print(paste("Delta in species number:", length(unique(Names))- length(unique(TargetDF$Best_guess_binomial))))
}
return(TargetDF)
}
IUCN_mammal <- read.csv("../../Data/HabitatData_09_08_18_IUCN_unprocessed/API_HabitatLevel2_Mammals_20180726.csv", sep=",")
Test <-  Replace_by_accepted_name(Syn_Mammals, IUCN_mammal, "binomial")
Names[i]
any(grepl(Names[i], Syn$Original)
)
Syn$Accepted[Syn$Original==Names[i]]
View(Test)
Replace_by_accepted_name <- function(Syn, TargetDF, colnamespecies) {
browser()
Syn$Original <- as.character(Syn$Original)
Syn$Accepted <- as.character(Syn$Accepted)
Syn$CorrectedTypos <- as.character(Syn$CorrectedTypos)
if (class(TargetDF)=="phylo") {
Names <- TargetDF$tip.label %>% unlist
for (i in 1:length(Names)) {
if (!grepl("cf.|sp.", Names[i])) {
TargetDF$tip.label[TargetDF$tip.label==Names[i]] <- Syn$Accepted[Syn$Original==Names[i]]
}
print(i)
}
print(paste("Delta in species number:", length(unique(Names))- length(unique(TargetDF$tip.label))))
} else {
TargetDF[ , colnamespecies] <- as.character(as.factor(TargetDF[ , colnamespecies]))
Names <- TargetDF[ , colnamespecies] %>% unique
for (i in 1:length(Names)) {
if(Names[i]=="Desmodus draculae") {
TargetDF$Best_guess_binomial[TargetDF[ , colnamespecies]==Names[i]] <-"Desmodus draculae"; next()}
if(any(grepl(Names[i], Syn$Original))){
TargetDF$Best_guess_binomial[TargetDF[ , colnamespecies]==Names[i]] <- Syn$Accepted[Syn$Original==Names[i]]
}
else {
TargetDF$Best_guess_binomial[TargetDF[ , colnamespecies]==Names[i]] <- Syn$Accepted[Syn$CorrectedTypos==Names[i]]
# TargetDF$Best_guess_binomial[i] <- Syn$Accepted[Syn$CorrectedTypos==Names[i]]
}
# print(i)
}
print(paste("Delta in species number:", length(unique(Names))- length(unique(TargetDF$Best_guess_binomial))))
}
return(TargetDF)
}
Test <-  Replace_by_accepted_name(Syn_Mammals, IUCN_mammal, "binomial")
X <- table(Test$Best_guess_binomial ) %>% as.data.frame()
View(X)
source('~/PhD/PhD_analyses/1.Trait_compilation/Code/0.Prerequisites/0.4.Replace_by_accepted_names.R', echo=TRUE)
source('~/PhD/PhD_analyses/1.Trait_compilation/Code/0.Prerequisites/0.4.Replace_by_accepted_names.R', echo=TRUE)
source('~/PhD/PhD_analyses/1.Trait_compilation/Code/0.Prerequisites/0.4.Replace_by_accepted_names.R', echo=TRUE)
source('~/PhD/PhD_analyses/1.Trait_compilation/Code/0.Prerequisites/0.6.IUCN_Habitat_classification.R', echo=TRUE)
View(Habitat_amphibian)
View(Habitat_mammal)
sqrt(139.5)
View(Habitat_mammal)
View(Habitat_bird)
View(Habitat_reptile)
source('~/PhD/PhD_analyses/1.Trait_compilation/Code/0.Prerequisites/0.7.Process_diet_information.R', echo=TRUE)
