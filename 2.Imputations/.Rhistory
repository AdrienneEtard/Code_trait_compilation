#
# # Trophic level
# for (i in 1:nrow(Sekercioglu)) {
#   if (any(Sekercioglu[i, c("FR", "NE", "SE", "PL")], na.rm=T)==T & any(Sekercioglu[i, c("IN", "VE", "SC")], na.rm=T)==F) {Sekercioglu$Trophic_level[i] <- "Herbivore"}
#   if (any(Sekercioglu[i, c("FR", "NE", "SE", "PL")], na.rm=T)==F & any(Sekercioglu[i, c("IN", "VE","SC")], na.rm=T)==T) {Sekercioglu$Trophic_level[i] <- "Carnivore"}
#   if (any(Sekercioglu[i, c("FR", "NE", "SE", "PL")], na.rm=T)==T & any(Sekercioglu[i, c("IN", "VE", "SC")], na.rm=T)==T) {Sekercioglu$Trophic_level[i] <- "Omnivore"}
#   if (any(Sekercioglu[i, c("OM")], na.rm=T)==T) {Sekercioglu$Trophic_level[i] <- "Omnivore"}
#   if (any(Sekercioglu[i, c("FR", "NE", "SE", "PL","OM")], na.rm=T)==F & any(Sekercioglu[i, c("IN", "VE", "SC")], na.rm=T)==F) {Sekercioglu$Trophic_level[i] <- NA}
# }
#-----------------------------------------------------------------------------
# Kissling (MammalDIET)
Diet <- c("FR", "NE", "SE", "PL", "IN", "VE")
MammalDIET[, Diet] <- NA
for (i in 1:nrow(MammalDIET)) {
if (any(MammalDIET[i, c("Vertebrate", "Mammal", "Bird", "Herptile","Fish")]==1, na.rm=T)) {MammalDIET$VE[i] <- 1}
if (any(MammalDIET[i, "Invertebrate"]==1, na.rm=T)) {MammalDIET$IN[i] <- 1}
if (any(MammalDIET[i, "Seed"]==1, na.rm=T)) {MammalDIET$SE[i] <- 1}
if (any(MammalDIET[i, "Fruit"]==1, na.rm=T)) {MammalDIET$FR[i] <- 1}
if (any(MammalDIET[i, "Nectar"]==1, na.rm=T)) {MammalDIET$NE[i] <- 1}
if (any(MammalDIET[i, c("Root", "Leaf", "Woody", "Herbaceous")]==1, na.rm=T)) {MammalDIET$PL[i] <- 1}
if (any(MammalDIET[i, "Plant"]==1 & all(MammalDIET[i,c("Seed", "Fruit", "Nectar")]==0), na.rm=T)) {MammalDIET$PL[i] <- 1} # this is an approximation
if (any(MammalDIET[i, "MammalEater"]==1, na.rm=T)) {MammalDIET$VE[i] <- 1}
if (any(MammalDIET[i, "Insectivore"]==1, na.rm=T)) {MammalDIET$IN[i] <- 1}
if (any(MammalDIET[i, "Frugivore"]==1, na.rm=T)) {MammalDIET$FR[i] <- 1}
if (any(MammalDIET[i, "Granivore"]==1, na.rm=T)) {MammalDIET$SE[i] <- 1}
if (any(MammalDIET[i, "Folivore"]==1, na.rm=T)) {MammalDIET$PL[i] <- 1}
if (any(MammalDIET[i, Diet], na.rm=TRUE)) {
ToPaste <- D[which(MammalDIET[i, c("PL", "NE", "SE", "FR", "IN", "VE")]==1)]
MammalDIET$Primary_diet[i] <- paste(ToPaste, collapse = "|")} else {
MammalDIET$Primary_diet[i] <- NA
}
}
# Diet breadth
MammalDIET$Diet_breadth <- apply(MammalDIET[, Diet], 1, sum, na.rm=T)
MammalDIET$Diet_breadth[MammalDIET$Diet_breadth==0] <- NA
unique(MammalDIET$Diet_breadth)
#  -----------------------------------------------------------------------
# Elton trait diet
Process_Elton_diet <- function(Elton){
Diet <- c("FR", "NE", "SE", "PL", "IN", "VE", "SCV")
Elton[, Diet] <- NA
for (i in 1:nrow(Elton)) {
if (any(Elton[i, c("Diet.Vunk", "Diet.Vend", "Diet.Vect", "Diet.Vfish")]!=0, na.rm=T)) {Elton$VE[i] <- 1}
if (any(Elton[i, "Diet.Inv"]!=0, na.rm=T)) {Elton$IN[i] <- 1}
if (any(Elton[i, "Diet.Scav"]!=0, na.rm=T)) {Elton$SCV[i] <- 1}
if (any(Elton[i, "Diet.Fruit"]!=0, na.rm=T)) {Elton$FR[i] <- 1}
if (any(Elton[i, "Diet.Nect"]!=0, na.rm=T)) {Elton$NE[i] <- 1}
if (any(Elton[i, "Diet.Seed"]!=0, na.rm=T)) {Elton$SE[i] <- 1}
if (any(Elton[i, "Diet.PlantO"]!=0, na.rm=T)) {Elton$PL[i] <- 1}
if (any(Elton[i, Diet], na.rm=TRUE)) {
ToPaste <- Diet[which(Elton[i, c("PL", "NE", "SE", "FR", "IN", "VE")]==1)]
Elton$Primary_diet[i] <- paste(ToPaste, collapse = "|")} else {
Elton$Primary_diet[i] <- NA
}
Elton[, Diet] <- apply(Elton[, Diet], 2, as.numeric)
# trophic levels
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==T & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==F) {Elton$Trophic_level[i] <- "Herbivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==F & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==T) {Elton$Trophic_level[i] <- "Carnivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==T & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==T) {Elton$Trophic_level[i] <- "Omnivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==F & any(Elton[i, c("IN", "VE")], na.rm=T)==F) {Elton$Trophic_level[i] <- NA}
print(i)
}
Elton$Diet_breadth <- apply(Elton[, Diet], 1, sum, na.rm=T)
Elton$Diet_breadth[Elton$Diet_breadth==0] <- NA
return(Elton)
}
Elton_birds <- Process_Elton_diet(Elton_birds)
Elton_mammals <- Process_Elton_diet(Elton_mammals)
# Function to transform diet variable into binary (used inside the Imputations_missForest function)
Diet_as_binary <- function(DF) {
D <- DF %>% select(IN, VE, PL, SE, NE, FR, SCV)
for (i in 1:nrow(D)) {
if(any(D[i,]==1, na.rm = TRUE)) {
Col <- which(is.na(D[i,]))
D[i, Col] <- 0}
else{next()}
print(i)
}
DF[, c("IN", "VE", "PL", "SE", "NE", "FR", "SCV")] <- D
return(DF)
}
View(Amphibio)
View(Elton_mammals)
Elton_birds <- read.csv("../../Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/Elton_birds.csv")
Elton_mammals <-  read.csv("../../Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/Elton_mammals.csv")
Elton_birds <- read.csv("../../Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/Elton_birds.csv")
Elton_mammals <-  read.csv("../../Results/0.Data_resolved_taxonomy/Processed_datasets/Traits/Elton_mammals.csv")
Elton_birds <- Process_Elton_diet(Elton_birds)
View(Elton_birds)
View(Elton_mammals)
View(Elton_birds)
#  -----------------------------------------------------------------------
# Elton trait diet
Process_Elton_diet <- function(Elton){
Diet <- c("FR", "NE", "SE", "PL", "IN", "VE", "SCV")
Elton[, Diet] <- NA
for (i in 1:nrow(Elton)) {
if (any(Elton[i, c("Diet.Vunk", "Diet.Vend", "Diet.Vect", "Diet.Vfish")]!=0, na.rm=T)) {Elton$VE[i] <- 1}
if (any(Elton[i, "Diet.Inv"]!=0, na.rm=T)) {Elton$IN[i] <- 1}
if (any(Elton[i, "Diet.Scav"]!=0, na.rm=T)) {Elton$SCV[i] <- 1}
if (any(Elton[i, "Diet.Fruit"]!=0, na.rm=T)) {Elton$FR[i] <- 1}
if (any(Elton[i, "Diet.Nect"]!=0, na.rm=T)) {Elton$NE[i] <- 1}
if (any(Elton[i, "Diet.Seed"]!=0, na.rm=T)) {Elton$SE[i] <- 1}
if (any(Elton[i, "Diet.PlantO"]!=0, na.rm=T)) {Elton$PL[i] <- 1}
if (i==157) {browser()}
if (any(Elton[i, Diet], na.rm=TRUE)) {
ToPaste <- Diet[which(Elton[i, c("PL", "NE", "SE", "FR", "IN", "VE", "SCV")]==1)]
Elton$Primary_diet[i] <- paste(ToPaste, collapse = "|")} else {
Elton$Primary_diet[i] <- NA
}
Elton[, Diet] <- apply(Elton[, Diet], 2, as.numeric)
# trophic levels
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==T & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==F) {Elton$Trophic_level[i] <- "Herbivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==F & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==T) {Elton$Trophic_level[i] <- "Carnivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==T & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==T) {Elton$Trophic_level[i] <- "Omnivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==F & any(Elton[i, c("IN", "VE")], na.rm=T)==F) {Elton$Trophic_level[i] <- NA}
print(i)
}
Elton$Diet_breadth <- apply(Elton[, Diet], 1, sum, na.rm=T)
Elton$Diet_breadth[Elton$Diet_breadth==0] <- NA
return(Elton)
}
Elton_birds <- Process_Elton_diet(Elton_birds)
i
any(Elton[i, Diet], na.rm=TRUE)
Diet[which(Elton[i, c("PL", "NE", "SE", "FR", "IN", "VE", "SCV")]==1)]
Elton$FR[157]
Elton$PL[157]
#  -----------------------------------------------------------------------
# Elton trait diet
Process_Elton_diet <- function(Elton){
Diet <- c("FR", "NE", "SE", "PL", "IN", "VE", "SCV")
Elton[, Diet] <- NA
for (i in 1:nrow(Elton)) {
if (any(Elton[i, c("Diet.Vunk", "Diet.Vend", "Diet.Vect", "Diet.Vfish")]!=0, na.rm=T)) {Elton$VE[i] <- 1}
if (any(Elton[i, "Diet.Inv"]!=0, na.rm=T)) {Elton$IN[i] <- 1}
if (any(Elton[i, "Diet.Scav"]!=0, na.rm=T)) {Elton$SCV[i] <- 1}
if (any(Elton[i, "Diet.Fruit"]!=0, na.rm=T)) {Elton$FR[i] <- 1}
if (any(Elton[i, "Diet.Nect"]!=0, na.rm=T)) {Elton$NE[i] <- 1}
if (any(Elton[i, "Diet.Seed"]!=0, na.rm=T)) {Elton$SE[i] <- 1}
if (any(Elton[i, "Diet.PlantO"]!=0, na.rm=T)) {Elton$PL[i] <- 1}
if (i==157) {browser()}
if (any(Elton[i, Diet], na.rm=TRUE)) {
ToPaste <- Diet[which(Elton[i, c("FR", "NE", "SE", "PL", "IN", "VE", "SCV")]==1)]
Elton$Primary_diet[i] <- paste(ToPaste, collapse = "|")} else {
Elton$Primary_diet[i] <- NA
}
Elton[, Diet] <- apply(Elton[, Diet], 2, as.numeric)
# trophic levels
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==T & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==F) {Elton$Trophic_level[i] <- "Herbivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==F & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==T) {Elton$Trophic_level[i] <- "Carnivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==T & any(Elton[i, c("IN", "VE", "SCV")], na.rm=T)==T) {Elton$Trophic_level[i] <- "Omnivore"}
if (any(Elton[i, c("PL", "NE", "SE", "FR")], na.rm=T)==F & any(Elton[i, c("IN", "VE")], na.rm=T)==F) {Elton$Trophic_level[i] <- NA}
print(i)
}
Elton$Diet_breadth <- apply(Elton[, Diet], 1, sum, na.rm=T)
Elton$Diet_breadth[Elton$Diet_breadth==0] <- NA
return(Elton)
}
Elton_birds <- Process_Elton_diet(Elton_birds)
(any(Elton[i, Diet], na.rm=TRUE)
)
Diet[which(Elton[i, c("FR", "NE", "SE", "PL", "IN", "VE", "SCV")]==1)]
View(Elton_birds)
library(parallel)
X <- c("dplyr", "phytools", "missForest", "pbapply")
lapply(X, library, character.only=TRUE); rm(X)
`%nin%` <- Negate(`%in%`)
source("Functions_for_missForest_imputations.R")
## Load phylogenies; data obtained from www.biodiversitycenter.org/ttol; downloaded 06 July 2018 and then processed (resolved taxonomy, drop tips, etc)
Phylo_Mammals <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Mammals.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Amphibians <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Amphibians.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Reptiles <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Reptiles.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Birds <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Birds.nwk") %>% .Format_tiplabels()  %>% compute.brlen()
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.with_phylo_eigenvectors/Reptiles.csv")
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR", "SCV")
Taxinfo <- "Order"
Traits_cont <-  c("log10_Body_mass_g", "log10_Longevity_d", "log10_Litter_size",
"Range_size_m2", "sqrt_Habitat_breadth_IUCN")
Traits_cat <- c(Habitat, "Specialisation",        # Include diet now or derive later from imputed primary diet?
"Diel_activity","Trophic_level", Diet)
EV <- c(); for(i in 1:10) {EV <- c(EV,paste("EV_",i, sep=""))}
MammalsCont <- c(Traits_cont, "log10_Generation_length_d", "log10_Adult_svl_cm")
BirdsCont <- Traits_cont
ReptilesCont <- c(Traits_cont, "log10_Adult_svl_cm", "log10_Maturity_d")
AmphibiansCont <- c(Traits_cont, "log10_Body_length_mm")
PhyloList <- list(M=Phylo_Mammals, B=Phylo_Birds, R=Phylo_Reptiles, A=Phylo_Amphibians)
Cont.TraitsList <- list(M=MammalsCont, B=BirdsCont, R=ReptilesCont, A=AmphibiansCont)
Cat.TraitsList <- list(M=Traits_cat, B=Traits_cat, R=Traits_cat[Traits_cat %nin% Diet], A=Traits_cat)
DF.TraitsList <- list(M=Mammals, B=Birds, R=Reptiles, A=Amphibians)
Taxinfo.List <- list(M="Order", B="Order", R="Order", A=c("Order", "Family"))
DietTRUE.List <- list(M=TRUE, B=TRUE, R=FALSE, A=TRUE)
# mcmapply only works with forking (Ubuntu) -- or pbmcmapply, only with forking
Imputed.Vertebrate_Traits <- pbmapply (FUN=Imputations_missForest,
DF.TraitsList,
Phylo=PhyloList,
Taxinfo=Taxinfo,
Traits_cont=Cont.TraitsList,
Traits_cat=Cat.TraitsList,
EV=EV,
ErrorTrue=TRUE,
DietTRUE=DietTRUE.List)
BirdsCont
Traits_cat
EV
Test <- Imputations_missForest(Birds, Phylo_Birds, "Order", BirdsCont, Traits_cat, EV = EV, ErrorTrue = TRUE, DietTRUE=TRUE)
colnames(Birds)
Imputations_missForest <- function (TraitDF, Phylo, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE) {
browser()
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR", "SCV")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE) }
else { R.Imputed <- missForest(To_impute, variablewise = FALSE) }
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror
## Select traits and variables of interest
Continuous <-  c("log10_Body_mass_g", "log10_Longevity_d", "log10_Litter_size",
"Range_size_m2", "sqrt_Habitat_breadth_IUCN")
if(DietTRUE) {
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", Diet)}
else{Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")}
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Return
return(list(Imputed.Values=Imputed, Imputations.Errors=Errors))
}
Test <- Imputations_missForest(Birds, Phylo_Birds, "Order", BirdsCont, Traits_cat, EV = EV, ErrorTrue = TRUE, DietTRUE=TRUE)
Q
Test <- Imputations_missForest(Birds, Phylo_Birds, "Order", BirdsCont, Traits_cat, EV = EV, ErrorTrue = TRUE, DietTRUE=TRUE)
colnames(To_impute)
rownames(To_impute)
Imputations_missForest <- function (TraitDF, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE) {
browser()
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR", "SCV")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE) }
else { R.Imputed <- missForest(To_impute, variablewise = FALSE) }
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror
## Select traits and variables of interest
Continuous <-  c("log10_Body_mass_g", "log10_Longevity_d", "log10_Litter_size",
"Range_size_m2", "sqrt_Habitat_breadth_IUCN")
if(DietTRUE) {
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", Diet)}
else{Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")}
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Return
return(list(Imputed.Values=Imputed, Imputations.Errors=Errors))
}
View(Birds)
View(Birds)
Test <- Imputations_missForest(Birds[c(1:50),], "Order", BirdsCont, Traits_cat, EV = EV, ErrorTrue = TRUE, DietTRUE=TRUE)
Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
Imputations_missForest <- function (TraitDF, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE) {
# browser()
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR", "SCV")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE) }
else { R.Imputed <- missForest(To_impute, variablewise = FALSE) }
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror
## Select traits and variables of interest
Continuous <-  c("log10_Body_mass_g", "log10_Longevity_d", "log10_Litter_size",
"Range_size_m2", "sqrt_Habitat_breadth_IUCN")
if(DietTRUE) {
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", Diet)}
else{Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")}
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Return
return(list(Imputed.Values=Imputed, Imputations.Errors=Errors))
}
ReptilesCont
Test <- Imputations_missForest(Reptiles[c(1:50),], "Order", ReptilesCont, Traits_cat, EV = EV, ErrorTrue = TRUE, DietTRUE=FALSE)
AmphibiansCont
Test <- Imputations_missForest(Amphibians[c(1:50),], "Order", AmphibiansCont, Traits_cat, EV = EV, ErrorTrue = TRUE, DietTRUE=TRUE)
# mcmapply only works with forking (Ubuntu) -- or pbmcmapply, only with forking
DF.TraitsList <- list(M=Mammals[c(1:50),], B=Birds[c(1:50),], R=Reptiles[c(1:50),], A=Amphibians[c(1:50),])
Imputed.Vertebrate_Traits <- pbmapply (FUN=Imputations_missForest,
DF.TraitsList,
# Phylo=PhyloList,
Taxinfo=Taxinfo,
Traits_cont=Cont.TraitsList,
Traits_cat=Cat.TraitsList,
EV=EV,
ErrorTrue=TRUE,
DietTRUE=DietTRUE.List)
Imputations_missForest <- function (TraitDF, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE) {
# browser()
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR", "SCV")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE) }
else { R.Imputed <- missForest(To_impute, variablewise = FALSE) }
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror
## Select traits and variables of interest
Continuous <-  c("log10_Body_mass_g", "log10_Longevity_d", "log10_Litter_size",
"Range_size_m2", "sqrt_Habitat_breadth_IUCN")
if(DietTRUE) {
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", Diet)}
else{Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")}
browser()
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Return
return(list(Imputed.Values=Imputed, Imputations.Errors=Errors))
}
Imputed.Vertebrate_Traits <- pbmapply (FUN=Imputations_missForest,
DF.TraitsList,
# Phylo=PhyloList,
Taxinfo=Taxinfo,
Traits_cont=Cont.TraitsList,
Traits_cat=Cat.TraitsList,
EV=EV,
ErrorTrue=TRUE,
DietTRUE=DietTRUE.List)
colnames(Imputed)
EV
library(parallel)
X <- c("dplyr", "phytools", "missForest", "pbapply")
lapply(X, library, character.only=TRUE); rm(X)
`%nin%` <- Negate(`%in%`)
source("Functions_for_missForest_imputations.R")
Imputations_missForest <- function (TraitDF, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE) {
# browser()
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR", "SCV")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE) }
else { R.Imputed <- missForest(To_impute, variablewise = FALSE) }
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror
## Select traits and variables of interest
Continuous <-  c("log10_Body_mass_g", "log10_Longevity_d", "log10_Litter_size",
"Range_size_m2", "sqrt_Habitat_breadth_IUCN")
if(DietTRUE) {
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", Diet)}
else{Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")}
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Return
return(list(Imputed.Values=Imputed, Imputations.Errors=Errors))
}
X <- c("dplyr", "phytools", "missForest", "pbapply")
lapply(X, library, character.only=TRUE); rm(X)
`%nin%` <- Negate(`%in%`)
source("Functions_for_missForest_imputations.R")
Phylo_Mammals <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Mammals.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Amphibians <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Amphibians.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Reptiles <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Reptiles.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Birds <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Birds.nwk") %>% .Format_tiplabels()  %>% compute.brlen()
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.with_phylo_eigenvectors/Reptiles.csv")
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR", "SCV")
Taxinfo <- "Order"
Traits_cont <-  c("log10_Body_mass_g", "log10_Longevity_d", "log10_Litter_size",
"Range_size_m2", "sqrt_Habitat_breadth_IUCN")
Traits_cat <- c(Habitat, "Specialisation",        # Include diet now or derive later from imputed primary diet?
"Diel_activity","Trophic_level", Diet)
## Add some traits for each taxon # TODO check trait names
MammalsCont <- c(Traits_cont, "log10_Generation_length_d", "log10_Adult_svl_cm")
BirdsCont <- Traits_cont
ReptilesCont <- c(Traits_cont, "log10_Adult_svl_cm", "log10_Maturity_d")
AmphibiansCont <- c(Traits_cont, "log10_Body_length_mm")
## Function arguments as lists
#PhyloList <- list(M=Phylo_Mammals, B=Phylo_Birds, R=Phylo_Reptiles, A=Phylo_Amphibians)
Cont.TraitsList <- list(M=MammalsCont, B=BirdsCont, R=ReptilesCont, A=AmphibiansCont)
Cat.TraitsList <- list(M=Traits_cat, B=Traits_cat, R=Traits_cat[Traits_cat %nin% Diet], A=Traits_cat)
DF.TraitsList <- list(M=Mammals, B=Birds, R=Reptiles, A=Amphibians)
Taxinfo.List <- list(M="Order", B="Order", R="Order", A=c("Order", "Family"))
DietTRUE.List <- list(M=TRUE, B=TRUE, R=FALSE, A=TRUE)
DF.TraitsList
Imputed.Vertebrate_Traits <- pbmapply (FUN=Imputations_missForest,
DF.TraitsList,
# Phylo=PhyloList,
Taxinfo=Taxinfo,
Traits_cont=Cont.TraitsList,
Traits_cat=Cat.TraitsList,
EV="EV_1",
ErrorTrue=TRUE,
DietTRUE=DietTRUE.List)
glimpse(Imputed.Vertebrates_Traits)
glimpse(Imputed.Vertebrate_Traits)
?saveRDS
saveRDS(Imputed.Vertebrate_Traits, "../../Results/2.imputed_trait_datasets/imputed_datsets/I1.rds")
saveRDS(Imputed.Vertebrate_Traits, "../../Results/2.imputed_trait_datasets/imputed_datasets/I1.rds")
