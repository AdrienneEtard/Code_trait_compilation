Imputed$FR <- NA
Imputed$NE <- NA
Imputed$PL <- NA
if (std) {
Imputed$sqrt_Diet_breadth <- NA
Imputed$sqrt_Diet_breadth_reprocessed <- NA
}
else{
Imputed$Diet_breadth <- NA
Imputed$Diet_breadth_reprocessed <- NA
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
rownames(Imputed) <- c(1:nrow(Imputed))
## Return
ToReturn <- list(Imputed.Dataset=Imputed, Imputation.errors=Errors)
ToReturn <- list(ToReturn)
return(ToReturn)
}
Test <- To_apply_parallel_imputations(ArgumentsList)
Imputations_missForest <- function (TraitDF, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE, std) {
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
browser()
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE)
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror %>%
as.data.frame() %>%
t()
colnames(Errors) <- paste(colnames(To_impute), names(R.Imputed$OOBerror))
row.names(Errors) <- 1
}
else { R.Imputed <- missForest(To_impute, variablewise = FALSE)
Errors <- R.Imputed$OOBerror
Imputed <- R.Imputed$ximp
}
## Select traits and variables of interest after imputations
if(DietTRUE) {
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", "Primary_diet", Diet)
}
else{
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")
}
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Add taxonomic information
Imputed$Class <- TraitDF$Class
Imputed$Order <- TraitDF$Order
Imputed$Family <- TraitDF$Family
Imputed$Genus <- TraitDF$Genus
## Reprocess Primary diet and diet breadth (sqrt + normalise) if diet is included
## Then reorder columns.
if(DietTRUE){
Func <- function(X) {
names(X) <- Diet
ToPaste <- names(X)[which(X==1)]
return(paste(ToPaste, collapse = "|"))
}
# Reprocess primary diet, for comparison with imputed values
Imputed$Primary_diet_reprocessed <- apply(Imputed[,Diet], 1, Func)
# Imputed$Primary_diet_reprocessed[Imputed$Primary_diet_reprocessed==""] <- "OM"
# Reprocess diet breadth, for comparison with imputed values
Imputed[, Diet] <- apply(Imputed[, Diet], 2, as.numeric)
Imputed$Diet_breadth_reprocessed <- apply(Imputed[, Diet], 1, sum, na.rm=T)
if(std) {
Imputed$Diet_breadth_reprocessed <- sqrt(Imputed$Diet_breadth_reprocessed)
Imputed$Diet_breadth_reprocessed <- scale(Imputed$Diet_breadth_reprocessed, center = TRUE, scale = TRUE)
colnames(Imputed)[colnames(Imputed)=="Diet_breadth_reprocessed"] <- "sqrt_Diet_breadth_reprocessed"
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
else {
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
Imputed$Primary_diet <- NA
Imputed$Primary_diet_reprocessed <- NA
Imputed$IN <- NA
Imputed$VE <- NA
Imputed$SE <- NA
Imputed$FR <- NA
Imputed$NE <- NA
Imputed$PL <- NA
if (std) {
Imputed$sqrt_Diet_breadth <- NA
Imputed$sqrt_Diet_breadth_reprocessed <- NA
}
else{
Imputed$Diet_breadth <- NA
Imputed$Diet_breadth_reprocessed <- NA
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
rownames(Imputed) <- c(1:nrow(Imputed))
## Return
ToReturn <- list(Imputed.Dataset=Imputed, Imputation.errors=Errors)
ToReturn <- list(ToReturn)
return(ToReturn)
}
Test <- To_apply_parallel_imputations(ArgumentsList)
R.Imputed$OOBerror
R.Imputed$OOBerror %>%
as.data.frame() %>%
t()
paste(colnames(To_impute), names(R.Imputed$OOBerror))
View(Errors)
View(Errors)
View(Errors)
colnames(Errors) <- paste(colnames(To_impute), names(R.Imputed$OOBerror))
colnames(Errors)
R.Imputed$OOBerror
R.Imputed$OOBerror %>%
as.data.frame() %>%
t()
Errors <- R.Imputed$OOBerror %>%
as.data.frame() %>%
t()
View(Errors)
Imputations_missForest <- function (TraitDF, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE, std) {
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
browser()
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE)
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror %>%
as.data.frame() %>%
t() %>%
as.data.frame()
colnames(Errors) <- paste(colnames(To_impute), names(R.Imputed$OOBerror))
row.names(Errors) <- 1
}
else { R.Imputed <- missForest(To_impute, variablewise = FALSE)
Errors <- R.Imputed$OOBerror
Imputed <- R.Imputed$ximp
}
## Select traits and variables of interest after imputations
if(DietTRUE) {
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", "Primary_diet", Diet)
}
else{
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")
}
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Add taxonomic information
Imputed$Class <- TraitDF$Class
Imputed$Order <- TraitDF$Order
Imputed$Family <- TraitDF$Family
Imputed$Genus <- TraitDF$Genus
## Reprocess Primary diet and diet breadth (sqrt + normalise) if diet is included
## Then reorder columns.
if(DietTRUE){
Func <- function(X) {
names(X) <- Diet
ToPaste <- names(X)[which(X==1)]
return(paste(ToPaste, collapse = "|"))
}
# Reprocess primary diet, for comparison with imputed values
Imputed$Primary_diet_reprocessed <- apply(Imputed[,Diet], 1, Func)
# Imputed$Primary_diet_reprocessed[Imputed$Primary_diet_reprocessed==""] <- "OM"
# Reprocess diet breadth, for comparison with imputed values
Imputed[, Diet] <- apply(Imputed[, Diet], 2, as.numeric)
Imputed$Diet_breadth_reprocessed <- apply(Imputed[, Diet], 1, sum, na.rm=T)
if(std) {
Imputed$Diet_breadth_reprocessed <- sqrt(Imputed$Diet_breadth_reprocessed)
Imputed$Diet_breadth_reprocessed <- scale(Imputed$Diet_breadth_reprocessed, center = TRUE, scale = TRUE)
colnames(Imputed)[colnames(Imputed)=="Diet_breadth_reprocessed"] <- "sqrt_Diet_breadth_reprocessed"
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
else {
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
Imputed$Primary_diet <- NA
Imputed$Primary_diet_reprocessed <- NA
Imputed$IN <- NA
Imputed$VE <- NA
Imputed$SE <- NA
Imputed$FR <- NA
Imputed$NE <- NA
Imputed$PL <- NA
if (std) {
Imputed$sqrt_Diet_breadth <- NA
Imputed$sqrt_Diet_breadth_reprocessed <- NA
}
else{
Imputed$Diet_breadth <- NA
Imputed$Diet_breadth_reprocessed <- NA
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
rownames(Imputed) <- c(1:nrow(Imputed))
## Return
ToReturn <- list(Imputed.Dataset=Imputed, Imputation.errors=Errors)
ToReturn <- list(ToReturn)
return(ToReturn)
}
Test <- To_apply_parallel_imputations(ArgumentsList)
R.Imputed$OOBerror %>%
as.data.frame() %>%
t() %>%
as.data.frame()
paste(colnames(To_impute), names(R.Imputed$OOBerror))
warnings()
paste(colnames(To_impute), names(R.Imputed$OOBerror))
colnames(Errors) <- paste(colnames(To_impute), names(R.Imputed$OOBerror))
names(R.Imputed$OOBerror)
View(Imputed)
View(Errors)
R.Imputed$OOBerror
names(R.Imputed$OOBerror)
paste(colnames(To_impute), names(R.Imputed$OOBerror)
)
View(Imputed)
View(To_impute)
setdiff(colnames(To_impute, Imputed))
setdiff(colnames(To_impute), colnames(Imputed))
Imputations_missForest <- function (TraitDF, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE, std) {
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
browser()
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE)
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror %>%
as.data.frame() %>%
t() %>%
as.data.frame()
colnames(Errors) <- paste(colnames(Imputed), names(R.Imputed$OOBerror))
row.names(Errors) <- 1
}
else { R.Imputed <- missForest(To_impute, variablewise = FALSE)
Errors <- R.Imputed$OOBerror
Imputed <- R.Imputed$ximp
}
## Select traits and variables of interest after imputations
if(DietTRUE) {
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", "Primary_diet", Diet)
}
else{
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")
}
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Add taxonomic information
Imputed$Class <- TraitDF$Class
Imputed$Order <- TraitDF$Order
Imputed$Family <- TraitDF$Family
Imputed$Genus <- TraitDF$Genus
## Reprocess Primary diet and diet breadth (sqrt + normalise) if diet is included
## Then reorder columns.
if(DietTRUE){
Func <- function(X) {
names(X) <- Diet
ToPaste <- names(X)[which(X==1)]
return(paste(ToPaste, collapse = "|"))
}
# Reprocess primary diet, for comparison with imputed values
Imputed$Primary_diet_reprocessed <- apply(Imputed[,Diet], 1, Func)
# Imputed$Primary_diet_reprocessed[Imputed$Primary_diet_reprocessed==""] <- "OM"
# Reprocess diet breadth, for comparison with imputed values
Imputed[, Diet] <- apply(Imputed[, Diet], 2, as.numeric)
Imputed$Diet_breadth_reprocessed <- apply(Imputed[, Diet], 1, sum, na.rm=T)
if(std) {
Imputed$Diet_breadth_reprocessed <- sqrt(Imputed$Diet_breadth_reprocessed)
Imputed$Diet_breadth_reprocessed <- scale(Imputed$Diet_breadth_reprocessed, center = TRUE, scale = TRUE)
colnames(Imputed)[colnames(Imputed)=="Diet_breadth_reprocessed"] <- "sqrt_Diet_breadth_reprocessed"
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
else {
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
Imputed$Primary_diet <- NA
Imputed$Primary_diet_reprocessed <- NA
Imputed$IN <- NA
Imputed$VE <- NA
Imputed$SE <- NA
Imputed$FR <- NA
Imputed$NE <- NA
Imputed$PL <- NA
if (std) {
Imputed$sqrt_Diet_breadth <- NA
Imputed$sqrt_Diet_breadth_reprocessed <- NA
}
else{
Imputed$Diet_breadth <- NA
Imputed$Diet_breadth_reprocessed <- NA
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
rownames(Imputed) <- c(1:nrow(Imputed))
## Return
ToReturn <- list(Imputed.Dataset=Imputed, Imputation.errors=Errors)
ToReturn <- list(ToReturn)
return(ToReturn)
}
Test <- To_apply_parallel_imputations(ArgumentsList)
paste(colnames(Imputed), names(R.Imputed$OOBerror))
View(Errors)
warnings()
Test
View(Test)
