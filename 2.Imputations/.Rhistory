else{ImputedaxisX <- "collected"}
# RC data
Sp_RC_I <- RC_data$binomial[is.na(RC_data[,RC_TraitName])]
# if the coverage for that trait was 100% initially, compared my imputed values to Rob's collected values
if (length(Sp_RC_I)!=0) {
RC_Imputed <- RC_Imputed %>%
filter(binomial %in% Sp_RC_I)
RC_data <- RC_Imputed
}
else{ImputedaxisY <- "collected"}
}
# Standardise and scale RC data within each class
if (RC_TraitName %in% c("body_mass_median", "litter_clutch_size")){
RC_Birds <- subset(RC_data, class=="Aves")
RC_Birds <- Transform_zscore(RC_Birds, RC_TraitName, "log10")
RC_Mammals <- subset(RC_data, class=="Mammalia")
RC_Mammals <- Transform_zscore(RC_Mammals, RC_TraitName, "log10")
RC_data <- rbind(RC_Birds, RC_Mammals)
RC_data <- RC_data[order(RC_data$binomial),]
RC_TraitName <- paste("log10", RC_TraitName, sep="_")}
if (RC_TraitName=="hab_breadth"){
RC_Birds <- subset(RC_data, class=="Aves")
RC_Birds <- Transform_zscore(RC_Birds, RC_TraitName, "sqrt")
RC_Mammals <- subset(RC_data, class=="Mammalia")
RC_Mammals <- Transform_zscore(RC_Mammals, RC_TraitName, "sqrt")
RC_data <- rbind(RC_Birds, RC_Mammals)
RC_data <- RC_data[order(RC_data$binomial),]
RC_TraitName <- paste("sqrt", RC_TraitName, sep="_")}
# intersect AE and RC species
Y <- intersect(RC_data$binomial, AE_data$Best_guess_binomial)
RC_data <- RC_data %>% filter(binomial %in% Y)
AE_data <- AE_data %>% filter(Best_guess_binomial %in% Y)
# plot
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=12, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,5,0,"pt"), size=12),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=12),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=12))
if(!Categorical) {
ToPlot <- RC_data[, c("class","binomial", RC_TraitName)]
colnames(ToPlot)[3] <- "RC"
ToPlot$AE <- AE_data[, AE_TraitName]
if(RC_TraitName %in% c("log10_litter_clutch_size", "log10_body_mass_median")){
p <- ggplot(ToPlot, aes(AE, RC, color=ToPlot$class)) +
GGPoptions +
geom_point(alpha=0.7) +
geom_abline(slope = 1, intercept = 0, alpha=0.8) +
xlab(paste(Traitaxis, "(log10, ", ImputedaxisX," by AE)")) +
ylab(paste(Traitaxis,  "(log10, ", ImputedaxisY," by RC)")) +
scale_color_hue(name="Class", labels = c("Birds", "Mammals"))
return(p)
}
else{
p <- ggplot(ToPlot, aes(AE, RC, color=ToPlot$class)) +
GGPoptions +
geom_point(alpha=0.7) +
geom_abline(slope = 1, intercept = 0, alpha=0.8) +
xlab(paste("Habitat breadth (square-root, ", ImputedaxisX," by AE)")) +
ylab(paste("Habitat breadth (square-root, ",  ImputedaxisY, " by RC)")) +
scale_color_hue(name="Class", labels = c("Birds", "Mammals"))
return(p)
}
}
if(Categorical) {
Outcome <- AE_data$Best_guess_binomial %>% as.data.frame()
for (i in 1:nrow(AE_data)){
x <- AE_data[i, AE_TraitName]
y <- RC_data[i, RC_TraitName]
if(is.na(x)|is.na(y)) {Outcome$Result[i] <- "unknown"}
else{
if(x==y) {Outcome$Result[i] <- "same"}
if(x!=y)  { Outcome$Result[i] <- "different"}
}
}
ToPlot <- table(Outcome$Result) %>%
as.data.frame() %>%
setNames(., c("outcome", "prop")) %>%
mutate(prop=prop/nrow(Outcome)*100)
ToPlot <- ToPlot[order(ToPlot$prop),]
p <- ggplot(ToPlot, aes(outcome, prop)) +
GGPoptions +
geom_bar(stat="identity") +
xlab(paste(Traitaxis, ImputedaxisX, sep = ", ")) + ylab("% species") +
scale_x_discrete(limits=c("different", "unknown", "same"), labels=c("Contradicting", "Unkown", "Similar"))
return(p)
}
}
p2 <- Compare(RC_Collected, RC_Imputed, AE_Collected, AE_Imputed,  "litter_clutch_size","log10_Litter_size", FALSE,"Litter/clutch size", "imputed", "imputed",TRUE)
Compare <- function(RC_data, RC_imputed, AE_data, AE_imputed, RC_TraitName, AE_TraitName, Categorical, Traitaxis, ImputedaxisX, ImputedaxisY, Imputed) {
if(Imputed) {
# filter species for which the trait value was imputed
# AE data
Sp_AE_I <- AE_data$Best_guess_binomial[is.na(AE_data[,AE_TraitName])]
# if the coverage for that trait was 100% initially, compared my collected values to Rob's imputed values (if they exist)
if (length(Sp_AE_I)!=0) {
AE_Imputed <- AE_Imputed %>%
filter(binomial %in% Sp_AE_I)
AE_data <- AE_Imputed
}
else{ImputedaxisX <- "collected"}
# RC data
Sp_RC_I <- RC_data$binomial[is.na(RC_data[,RC_TraitName])]
# if the coverage for that trait was 100% initially, compared my imputed values to Rob's collected values
if (length(Sp_RC_I)!=0) {
RC_Imputed <- RC_Imputed %>%
filter(binomial %in% Sp_RC_I)
RC_data <- RC_Imputed
}
else{ImputedaxisY <- "collected"}
}
# Standardise and scale RC data within each class
if (RC_TraitName %in% c("body_mass_median", "litter_clutch_size")){
RC_Birds <- subset(RC_data, class=="Aves")
RC_Birds <- Transform_zscore(RC_Birds, RC_TraitName, "log10")
RC_Mammals <- subset(RC_data, class=="Mammalia")
RC_Mammals <- Transform_zscore(RC_Mammals, RC_TraitName, "log10")
RC_data <- rbind(RC_Birds, RC_Mammals)
RC_data <- RC_data[order(RC_data$binomial),]
RC_TraitName <- paste("log10", RC_TraitName, sep="_")}
if (RC_TraitName=="hab_breadth"){
RC_Birds <- subset(RC_data, class=="Aves")
RC_Birds <- Transform_zscore(RC_Birds, RC_TraitName, "sqrt")
RC_Mammals <- subset(RC_data, class=="Mammalia")
RC_Mammals <- Transform_zscore(RC_Mammals, RC_TraitName, "sqrt")
RC_data <- rbind(RC_Birds, RC_Mammals)
RC_data <- RC_data[order(RC_data$binomial),]
RC_TraitName <- paste("sqrt", RC_TraitName, sep="_")}
# intersect AE and RC species
Y <- intersect(RC_data$binomial, AE_data$Best_guess_binomial)
RC_data <- RC_data %>% filter(binomial %in% Y)
AE_data <- AE_data %>% filter(Best_guess_binomial %in% Y)
# plot
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=12, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,5,0,"pt"), size=12),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=12),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=12))
if(!Categorical) {
ToPlot <- RC_data[, c("class","binomial", RC_TraitName)]
colnames(ToPlot)[3] <- "RC"
ToPlot$AE <- AE_data[, AE_TraitName]
if(RC_TraitName %in% c("log10_litter_clutch_size", "log10_body_mass_median")){
p <- ggplot(ToPlot, aes(AE, RC, color=ToPlot$class)) +
GGPoptions +
geom_point(alpha=0.7) +
geom_abline(slope = 1, intercept = 0, alpha=0.8) +
xlab(paste(Traitaxis, "(log10, ", ImputedaxisX," by AE)")) +
ylab(paste(Traitaxis,  "(log10, ", ImputedaxisY," by RC)")) +
scale_color_hue(name="Class", labels = c("Birds", "Mammals"))
return(p)
}
else{
p <- ggplot(ToPlot, aes(AE, RC, color=ToPlot$class)) +
GGPoptions +
geom_point(alpha=0.7) +
geom_abline(slope = 1, intercept = 0, alpha=0.8) +
xlab(paste("Habitat breadth (square-root, ", ImputedaxisX," by AE)")) +
ylab(paste("Habitat breadth (square-root, ",  ImputedaxisY, " by RC)")) +
scale_color_hue(name="Class", labels = c("Birds", "Mammals"))
return(p)
}
}
if(Categorical) {
Outcome <- AE_data$Best_guess_binomial %>% as.data.frame()
for (i in 1:nrow(AE_data)){
x <- AE_data[i, AE_TraitName]
y <- RC_data[i, RC_TraitName]
if(is.na(x)|is.na(y)) {Outcome$Result[i] <- "unknown"}
else{
if(x==y) {Outcome$Result[i] <- "same"}
if(x!=y)  { Outcome$Result[i] <- "different"}
}
}
ToPlot <- table(Outcome$Result) %>%
as.data.frame() %>%
setNames(., c("outcome", "prop")) %>%
mutate(prop=prop/nrow(Outcome)*100)
ToPlot <- ToPlot[order(ToPlot$prop),]
p <- ggplot(ToPlot, aes(outcome, prop)) +
GGPoptions +
geom_bar(stat="identity") +
xlab(paste(Traitaxis, ImputedaxisX, sep = ", ")) + ylab("% species") +
scale_x_discrete(limits=c("different", "unknown", "same"), labels=c("Contradicting", "Unkown", "Similar"))
return(p)
}
}
p2 <- Compare(RC_Collected, RC_Imputed, AE_Collected, AE_Imputed,  "litter_clutch_size","log10_Litter_size", FALSE,"Litter/clutch size", "imputed", "imputed",TRUE)
Compare <- function(RC_data, RC_imputed, AE_data, AE_imputed, RC_TraitName, AE_TraitName, Categorical, Traitaxis, ImputedaxisX, ImputedaxisY, Imputed) {
ImputedaxisX <- ImputedaxisX
ImputedaxisY <- ImputedaxisY
if(Imputed) {
# filter species for which the trait value was imputed
# AE data
Sp_AE_I <- AE_data$Best_guess_binomial[is.na(AE_data[,AE_TraitName])]
# if the coverage for that trait was 100% initially, compared my collected values to Rob's imputed values (if they exist)
if (length(Sp_AE_I)!=0) {
AE_Imputed <- AE_Imputed %>%
filter(binomial %in% Sp_AE_I)
AE_data <- AE_Imputed
}
else{ImputedaxisX <- "collected"}
# RC data
Sp_RC_I <- RC_data$binomial[is.na(RC_data[,RC_TraitName])]
# if the coverage for that trait was 100% initially, compared my imputed values to Rob's collected values
if (length(Sp_RC_I)!=0) {
RC_Imputed <- RC_Imputed %>%
filter(binomial %in% Sp_RC_I)
RC_data <- RC_Imputed
}
else{ImputedaxisY <- "collected"}
}
# Standardise and scale RC data within each class
if (RC_TraitName %in% c("body_mass_median", "litter_clutch_size")){
RC_Birds <- subset(RC_data, class=="Aves")
RC_Birds <- Transform_zscore(RC_Birds, RC_TraitName, "log10")
RC_Mammals <- subset(RC_data, class=="Mammalia")
RC_Mammals <- Transform_zscore(RC_Mammals, RC_TraitName, "log10")
RC_data <- rbind(RC_Birds, RC_Mammals)
RC_data <- RC_data[order(RC_data$binomial),]
RC_TraitName <- paste("log10", RC_TraitName, sep="_")}
if (RC_TraitName=="hab_breadth"){
RC_Birds <- subset(RC_data, class=="Aves")
RC_Birds <- Transform_zscore(RC_Birds, RC_TraitName, "sqrt")
RC_Mammals <- subset(RC_data, class=="Mammalia")
RC_Mammals <- Transform_zscore(RC_Mammals, RC_TraitName, "sqrt")
RC_data <- rbind(RC_Birds, RC_Mammals)
RC_data <- RC_data[order(RC_data$binomial),]
RC_TraitName <- paste("sqrt", RC_TraitName, sep="_")}
# intersect AE and RC species
Y <- intersect(RC_data$binomial, AE_data$Best_guess_binomial)
RC_data <- RC_data %>% filter(binomial %in% Y)
AE_data <- AE_data %>% filter(Best_guess_binomial %in% Y)
# plot
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=12, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,5,0,"pt"), size=12),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=12),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=12))
if(!Categorical) {
ToPlot <- RC_data[, c("class","binomial", RC_TraitName)]
colnames(ToPlot)[3] <- "RC"
ToPlot$AE <- AE_data[, AE_TraitName]
if(RC_TraitName %in% c("log10_litter_clutch_size", "log10_body_mass_median")){
p <- ggplot(ToPlot, aes(AE, RC, color=ToPlot$class)) +
GGPoptions +
geom_point(alpha=0.7) +
geom_abline(slope = 1, intercept = 0, alpha=0.8) +
xlab(paste(Traitaxis, "(log10, ", ImputedaxisX," by AE)")) +
ylab(paste(Traitaxis,  "(log10, ", ImputedaxisY," by RC)")) +
scale_color_hue(name="Class", labels = c("Birds", "Mammals"))
return(p)
}
else{
p <- ggplot(ToPlot, aes(AE, RC, color=ToPlot$class)) +
GGPoptions +
geom_point(alpha=0.7) +
geom_abline(slope = 1, intercept = 0, alpha=0.8) +
xlab(paste("Habitat breadth (square-root, ", ImputedaxisX," by AE)")) +
ylab(paste("Habitat breadth (square-root, ",  ImputedaxisY, " by RC)")) +
scale_color_hue(name="Class", labels = c("Birds", "Mammals"))
return(p)
}
}
if(Categorical) {
Outcome <- AE_data$Best_guess_binomial %>% as.data.frame()
for (i in 1:nrow(AE_data)){
x <- AE_data[i, AE_TraitName]
y <- RC_data[i, RC_TraitName]
if(is.na(x)|is.na(y)) {Outcome$Result[i] <- "unknown"}
else{
if(x==y) {Outcome$Result[i] <- "same"}
if(x!=y)  { Outcome$Result[i] <- "different"}
}
}
ToPlot <- table(Outcome$Result) %>%
as.data.frame() %>%
setNames(., c("outcome", "prop")) %>%
mutate(prop=prop/nrow(Outcome)*100)
ToPlot <- ToPlot[order(ToPlot$prop),]
p <- ggplot(ToPlot, aes(outcome, prop)) +
GGPoptions +
geom_bar(stat="identity") +
xlab(paste(Traitaxis, ImputedaxisX, sep = ", ")) + ylab("% species") +
scale_x_discrete(limits=c("different", "unknown", "same"), labels=c("Contradicting", "Unkown", "Similar"))
return(p)
}
}
p2 <- Compare(RC_Collected, RC_Imputed, AE_Collected, AE_Imputed,  "litter_clutch_size","log10_Litter_size", FALSE,"Litter/clutch size", "imputed", "imputed",TRUE)
Compare <- function(RC_data, RC_imputed, AE_data, AE_imputed, RC_TraitName, AE_TraitName, Categorical, Traitaxis, ImputedaxisX, ImputedaxisY, Imputed) {
browser()
ImputedaxisX <- ImputedaxisX
ImputedaxisY <- ImputedaxisY
if(Imputed) {
# filter species for which the trait value was imputed
# AE data
Sp_AE_I <- AE_data$Best_guess_binomial[is.na(AE_data[,AE_TraitName])]
# if the coverage for that trait was 100% initially, compared my collected values to Rob's imputed values (if they exist)
if (length(Sp_AE_I)!=0) {
AE_Imputed <- AE_Imputed %>%
filter(binomial %in% Sp_AE_I)
AE_data <- AE_Imputed
}
else{ImputedaxisX <- "collected"}
# RC data
Sp_RC_I <- RC_data$binomial[is.na(RC_data[,RC_TraitName])]
# if the coverage for that trait was 100% initially, compared my imputed values to Rob's collected values
if (length(Sp_RC_I)!=0) {
RC_Imputed <- RC_Imputed %>%
filter(binomial %in% Sp_RC_I)
RC_data <- RC_Imputed
}
else{ImputedaxisY <- "collected"}
}
# Standardise and scale RC data within each class
if (RC_TraitName %in% c("body_mass_median", "litter_clutch_size")){
RC_Birds <- subset(RC_data, class=="Aves")
RC_Birds <- Transform_zscore(RC_Birds, RC_TraitName, "log10")
RC_Mammals <- subset(RC_data, class=="Mammalia")
RC_Mammals <- Transform_zscore(RC_Mammals, RC_TraitName, "log10")
RC_data <- rbind(RC_Birds, RC_Mammals)
RC_data <- RC_data[order(RC_data$binomial),]
RC_TraitName <- paste("log10", RC_TraitName, sep="_")}
if (RC_TraitName=="hab_breadth"){
RC_Birds <- subset(RC_data, class=="Aves")
RC_Birds <- Transform_zscore(RC_Birds, RC_TraitName, "sqrt")
RC_Mammals <- subset(RC_data, class=="Mammalia")
RC_Mammals <- Transform_zscore(RC_Mammals, RC_TraitName, "sqrt")
RC_data <- rbind(RC_Birds, RC_Mammals)
RC_data <- RC_data[order(RC_data$binomial),]
RC_TraitName <- paste("sqrt", RC_TraitName, sep="_")}
# intersect AE and RC species
Y <- intersect(RC_data$binomial, AE_data$Best_guess_binomial)
RC_data <- RC_data %>% filter(binomial %in% Y)
AE_data <- AE_data %>% filter(Best_guess_binomial %in% Y)
# plot
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=12, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,5,0,"pt"), size=12),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=12),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=12))
if(!Categorical) {
ToPlot <- RC_data[, c("class","binomial", RC_TraitName)]
colnames(ToPlot)[3] <- "RC"
ToPlot$AE <- AE_data[, AE_TraitName]
if(RC_TraitName %in% c("log10_litter_clutch_size", "log10_body_mass_median")){
p <- ggplot(ToPlot, aes(AE, RC, color=ToPlot$class)) +
GGPoptions +
geom_point(alpha=0.7) +
geom_abline(slope = 1, intercept = 0, alpha=0.8) +
xlab(paste(Traitaxis, "(log10, ", ImputedaxisX," by AE)")) +
ylab(paste(Traitaxis,  "(log10, ", ImputedaxisY," by RC)")) +
scale_color_hue(name="Class", labels = c("Birds", "Mammals"))
return(p)
}
else{
p <- ggplot(ToPlot, aes(AE, RC, color=ToPlot$class)) +
GGPoptions +
geom_point(alpha=0.7) +
geom_abline(slope = 1, intercept = 0, alpha=0.8) +
xlab(paste("Habitat breadth (square-root, ", ImputedaxisX," by AE)")) +
ylab(paste("Habitat breadth (square-root, ",  ImputedaxisY, " by RC)")) +
scale_color_hue(name="Class", labels = c("Birds", "Mammals"))
return(p)
}
}
if(Categorical) {
Outcome <- AE_data$Best_guess_binomial %>% as.data.frame()
for (i in 1:nrow(AE_data)){
x <- AE_data[i, AE_TraitName]
y <- RC_data[i, RC_TraitName]
if(is.na(x)|is.na(y)) {Outcome$Result[i] <- "unknown"}
else{
if(x==y) {Outcome$Result[i] <- "same"}
if(x!=y)  { Outcome$Result[i] <- "different"}
}
}
ToPlot <- table(Outcome$Result) %>%
as.data.frame() %>%
setNames(., c("outcome", "prop")) %>%
mutate(prop=prop/nrow(Outcome)*100)
ToPlot <- ToPlot[order(ToPlot$prop),]
p <- ggplot(ToPlot, aes(outcome, prop)) +
GGPoptions +
geom_bar(stat="identity") +
xlab(paste(Traitaxis, ImputedaxisX, sep = ", ")) + ylab("% species") +
scale_x_discrete(limits=c("different", "unknown", "same"), labels=c("Contradicting", "Unkown", "Similar"))
return(p)
}
}
p2 <- Compare(RC_Collected, RC_Imputed, AE_Collected, AE_Imputed,  "litter_clutch_size","log10_Litter_size", FALSE,"Litter/clutch size", "imputed", "imputed",TRUE)
Compare <- function(RC_data, RC_imputed, AE_data, AE_imputed, RC_TraitName, AE_TraitName, Categorical, Traitaxis, ImputedaxisX, ImputedaxisY, Imputed) {
# ImputedaxisX <- ImputedaxisX
# ImputedaxisY <- ImputedaxisY
if(Imputed) {
# filter species for which the trait value was imputed
# AE data
Sp_AE_I <- AE_data$Best_guess_binomial[is.na(AE_data[,AE_TraitName])]
# if the coverage for that trait was 100% initially, compared my collected values to Rob's imputed values (if they exist)
if (length(Sp_AE_I)!=0) {
AE_Imputed <- AE_Imputed %>%
filter(Best_guess_binomial %in% Sp_AE_I)
AE_data <- AE_Imputed
}
else{ImputedaxisX <- "collected"}
# RC data
Sp_RC_I <- RC_data$binomial[is.na(RC_data[,RC_TraitName])]
# if the coverage for that trait was 100% initially, compared my imputed values to Rob's collected values
if (length(Sp_RC_I)!=0) {
RC_Imputed <- RC_Imputed %>%
filter(binomial %in% Sp_RC_I)
RC_data <- RC_Imputed
}
else{ImputedaxisY <- "collected"}
}
# Standardise and scale RC data within each class
if (RC_TraitName %in% c("body_mass_median", "litter_clutch_size")){
RC_Birds <- subset(RC_data, class=="Aves")
RC_Birds <- Transform_zscore(RC_Birds, RC_TraitName, "log10")
RC_Mammals <- subset(RC_data, class=="Mammalia")
RC_Mammals <- Transform_zscore(RC_Mammals, RC_TraitName, "log10")
RC_data <- rbind(RC_Birds, RC_Mammals)
RC_data <- RC_data[order(RC_data$binomial),]
RC_TraitName <- paste("log10", RC_TraitName, sep="_")}
if (RC_TraitName=="hab_breadth"){
RC_Birds <- subset(RC_data, class=="Aves")
RC_Birds <- Transform_zscore(RC_Birds, RC_TraitName, "sqrt")
RC_Mammals <- subset(RC_data, class=="Mammalia")
RC_Mammals <- Transform_zscore(RC_Mammals, RC_TraitName, "sqrt")
RC_data <- rbind(RC_Birds, RC_Mammals)
RC_data <- RC_data[order(RC_data$binomial),]
RC_TraitName <- paste("sqrt", RC_TraitName, sep="_")}
# intersect AE and RC species
Y <- intersect(RC_data$binomial, AE_data$Best_guess_binomial)
RC_data <- RC_data %>% filter(binomial %in% Y)
AE_data <- AE_data %>% filter(Best_guess_binomial %in% Y)
# plot
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=12, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,5,0,"pt"), size=12),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=12),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=12))
if(!Categorical) {
ToPlot <- RC_data[, c("class","binomial", RC_TraitName)]
colnames(ToPlot)[3] <- "RC"
ToPlot$AE <- AE_data[, AE_TraitName]
if(RC_TraitName %in% c("log10_litter_clutch_size", "log10_body_mass_median")){
p <- ggplot(ToPlot, aes(AE, RC, color=ToPlot$class)) +
GGPoptions +
geom_point(alpha=0.7) +
geom_abline(slope = 1, intercept = 0, alpha=0.8) +
xlab(paste(Traitaxis, "(log10, ", ImputedaxisX," by AE)")) +
ylab(paste(Traitaxis,  "(log10, ", ImputedaxisY," by RC)")) +
scale_color_hue(name="Class", labels = c("Birds", "Mammals"))
return(p)
}
else{
p <- ggplot(ToPlot, aes(AE, RC, color=ToPlot$class)) +
GGPoptions +
geom_point(alpha=0.7) +
geom_abline(slope = 1, intercept = 0, alpha=0.8) +
xlab(paste("Habitat breadth (square-root, ", ImputedaxisX," by AE)")) +
ylab(paste("Habitat breadth (square-root, ",  ImputedaxisY, " by RC)")) +
scale_color_hue(name="Class", labels = c("Birds", "Mammals"))
return(p)
}
}
if(Categorical) {
Outcome <- AE_data$Best_guess_binomial %>% as.data.frame()
for (i in 1:nrow(AE_data)){
x <- AE_data[i, AE_TraitName]
y <- RC_data[i, RC_TraitName]
if(is.na(x)|is.na(y)) {Outcome$Result[i] <- "unknown"}
else{
if(x==y) {Outcome$Result[i] <- "same"}
if(x!=y)  { Outcome$Result[i] <- "different"}
}
}
ToPlot <- table(Outcome$Result) %>%
as.data.frame() %>%
setNames(., c("outcome", "prop")) %>%
mutate(prop=prop/nrow(Outcome)*100)
ToPlot <- ToPlot[order(ToPlot$prop),]
p <- ggplot(ToPlot, aes(outcome, prop)) +
GGPoptions +
geom_bar(stat="identity") +
xlab(paste(Traitaxis, ImputedaxisX, sep = ", ")) + ylab("% species") +
scale_x_discrete(limits=c("different", "unknown", "same"), labels=c("Contradicting", "Unkown", "Similar"))
return(p)
}
}
p2 <- Compare(RC_Collected, RC_Imputed, AE_Collected, AE_Imputed,  "litter_clutch_size","log10_Litter_size", FALSE,"Litter/clutch size", "imputed", "imputed",TRUE)
p2
p3 <- Compare(RC_Collected, RC_Imputed, AE_Collected, AE_Imputed,"hab_breadth","sqrt_Habitat_breadth_IUCN", FALSE, NULL, "imputed", TRUE)
## 3. Comparison of imputed data for mammals and birds
p1 <- Compare(RC_Collected, RC_Imputed, AE_Collected, AE_Imputed, "body_mass_median","log10_Body_mass_g", FALSE,"Body mass","imputed","imputed", TRUE)
p1
p3 <- Compare(RC_Collected, RC_Imputed, AE_Collected, AE_Imputed,"hab_breadth","sqrt_Habitat_breadth_IUCN", FALSE, NULL, "imputed", "imputed", TRUE)
p4 <- Compare(RC_Collected, RC_Imputed,  AE_Collected, AE_Imputed,  "activity","Diel_activity", TRUE, "Diel activity", "imputed","imputed", TRUE)
p <- ggarrange(p1,p2,p3,p4,common.legend = TRUE)
p
p <- ggarrange(p2,p1,p3,p4,common.legend = TRUE)
p
