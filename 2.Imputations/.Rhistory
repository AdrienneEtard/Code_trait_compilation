}
rownames(Imputed) <- c(1:nrow(Imputed))
## Return
ToReturn <- list(Imputed.Dataset=Imputed, Imputation.errors=Errors)
ToReturn <- list(ToReturn)
return(ToReturn)
}
X <- To_impute_parallel[[3]]
Test <- To_apply_parallel_imputations(X)
Imputations_missForest <- function (TraitDF, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE, std) {
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE) }
else { R.Imputed <- missForest(To_impute, variablewise = FALSE) }
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror
## Select traits and variables of interest after imputations
if(DietTRUE) {
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", "Primary_diet", Diet)
}
else{
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")
}
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Add taxonomic information
Imputed$Class <- TraitDF$Class
Imputed$Order <- TraitDF$Order
Imputed$Family <- TraitDF$Family
Imputed$Genus <- TraitDF$Genus
## Reprocess Primary diet and diet breadth (sqrt + normalise) if diet is included
## Then reorder columns.
if(DietTRUE){
Func <- function(X) {
names(X) <- Diet
ToPaste <- names(X)[which(X==1)]
return(paste(ToPaste, collapse = "|"))
}
# Reprocess primary diet, for comparison with imputed values
Imputed$Primary_diet_reprocessed <- apply(Imputed[,Diet], 1, Func)
# Reprocess diet breadth, for comparison with imputed values
Imputed[, Diet] <- apply(Imputed[, Diet], 2, as.numeric)
Imputed$Diet_breadth_reprocessed <- apply(Imputed[, Diet], 1, sum, na.rm=T)
if(std) {
Imputed$Diet_breadth_reprocessed <- sqrt(Imputed$Diet_breadth_reprocessed)
Imputed$Diet_breadth_reprocessed <- scale(Imputed$Diet_breadth_reprocessed, center = TRUE, scale = TRUE)
colnames(Imputed)[colnames(Imputed)=="Diet_breadth_reprocessed"] <- "sqrt_Diet_breadth_reprocessed"
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
else {
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
Imputed$Primary_diet <- NA
Imputed$Primary_diet_reprocessed <- NA
Imputed$IN <- NA
Imputed$VE <- NA
Imputed$SE <- NA
Imputed$FR <- NA
Imputed$NE <- NA
Imputed$PL <- NA
if (std) {
Imputed$sqrt_Diet_breadth <- NA
Imputed$sqrt_Diet_breadth_reprocessed <- NA
}
else{
Imputed$Diet_breadth <- NA
Imputed$Diet_breadth_reprocessed <- NA
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
rownames(Imputed) <- c(1:nrow(Imputed))
## Return
ToReturn <- list(Imputed.Dataset=Imputed, Imputation.errors=Errors)
ToReturn <- list(ToReturn)
return(ToReturn)
}
X <- To_impute_parallel[[3]]
Test <- To_apply_parallel_imputations(X)
View(Test)
glimpse(Test[[4]][[1]])
glimpse(Test[[3]][[1]])
X <- To_impute_parallel_st[[3]]
Test <- To_apply_parallel_imputations(X)
Imputations_missForest <- function (TraitDF, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE, std) {
browser()
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE) }
else { R.Imputed <- missForest(To_impute, variablewise = FALSE) }
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror
## Select traits and variables of interest after imputations
if(DietTRUE) {
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", "Primary_diet", Diet)
}
else{
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")
}
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Add taxonomic information
Imputed$Class <- TraitDF$Class
Imputed$Order <- TraitDF$Order
Imputed$Family <- TraitDF$Family
Imputed$Genus <- TraitDF$Genus
## Reprocess Primary diet and diet breadth (sqrt + normalise) if diet is included
## Then reorder columns.
if(DietTRUE){
Func <- function(X) {
names(X) <- Diet
ToPaste <- names(X)[which(X==1)]
return(paste(ToPaste, collapse = "|"))
}
# Reprocess primary diet, for comparison with imputed values
Imputed$Primary_diet_reprocessed <- apply(Imputed[,Diet], 1, Func)
# Reprocess diet breadth, for comparison with imputed values
Imputed[, Diet] <- apply(Imputed[, Diet], 2, as.numeric)
Imputed$Diet_breadth_reprocessed <- apply(Imputed[, Diet], 1, sum, na.rm=T)
if(std) {
Imputed$Diet_breadth_reprocessed <- sqrt(Imputed$Diet_breadth_reprocessed)
Imputed$Diet_breadth_reprocessed <- scale(Imputed$Diet_breadth_reprocessed, center = TRUE, scale = TRUE)
colnames(Imputed)[colnames(Imputed)=="Diet_breadth_reprocessed"] <- "sqrt_Diet_breadth_reprocessed"
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
else {
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
Imputed$Primary_diet <- NA
Imputed$Primary_diet_reprocessed <- NA
Imputed$IN <- NA
Imputed$VE <- NA
Imputed$SE <- NA
Imputed$FR <- NA
Imputed$NE <- NA
Imputed$PL <- NA
if (std) {
Imputed$sqrt_Diet_breadth <- NA
Imputed$sqrt_Diet_breadth_reprocessed <- NA
}
else{
Imputed$Diet_breadth <- NA
Imputed$Diet_breadth_reprocessed <- NA
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
rownames(Imputed) <- c(1:nrow(Imputed))
## Return
ToReturn <- list(Imputed.Dataset=Imputed, Imputation.errors=Errors)
ToReturn <- list(ToReturn)
return(ToReturn)
}
Test <- To_apply_parallel_imputations(X)
Traits_cont
colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)
View(TraitDF)
DF.TraitsList_st <- list(M=Mammals_st, B=Birds_st, R=Reptiles_st, A=Amphibians_st)
library(parallel)
library(dplyr)
library(phytools)
library(missForest)
library(pbmcapply)
library(pbapply)
# ## Preamble
`%nin%` <- Negate(`%in%`)
source("Functions_for_missForest_imputations.R")
Mammals_st <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.transformed_traits/Mammals.csv")
Birds_st <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.transformed_traits/Birds.csv")
Amphibians_st <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.transformed_traits/Amphibians.csv")
Reptiles_st <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.transformed_traits/Reptiles.csv")
## Load trait data: NOT transformed and NOT standardised, with phylogenetic imformation as eigenvectors
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Reptiles.csv")
Mammals_st <- Mammals_st[c(1:15),]
Birds_st <- Birds_st[c(1:15),]
Amphibians_st <- Amphibians_st[c(1:15),]
Reptiles_st <- Reptiles_st[c(1:15),]
Mammals <- Mammals[c(1:15),]
Birds <- Birds[c(1:15),]
Amphibians <- Amphibians[c(1:15),]
Reptiles <- Reptiles[c(1:15),]
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
Taxinfo <- "Order"
Traits_cont_st <-  c("log10_Body_mass_g", "log10_Longevity_d", "log10_Litter_size", "sqrt_Diet_breadth",
"Range_size_m2", "sqrt_Habitat_breadth_IUCN")
Traits_cont <-  c("Body_mass_g", "Longevity_d", "Litter_size", "Diet_breadth",
"Range_size_m2", "Habitat_breadth_IUCN")
Traits_cat <- c(Habitat, "Specialisation",
"Diel_activity","Trophic_level", Diet, "Primary_diet")
MammalsCont_st <- c(Traits_cont_st, "log10_Generation_length_d", "log10_Adult_svl_cm")
BirdsCont_st <- Traits_cont_st
ReptilesCont_st <- c(Traits_cont_st, "log10_Adult_svl_cm", "log10_Maturity_d")
AmphibiansCont_st <- c(Traits_cont_st, "log10_Body_length_mm")
MammalsCont <- c(Traits_cont, "Generation_length_d", "Adult_svl_cm")
BirdsCont <- Traits_cont
ReptilesCont <- c(Traits_cont, "Adult_svl_cm", "Maturity_d")
AmphibiansCont <- c(Traits_cont, "Body_length_mm")
DF.TraitsList <- list(M=Mammals, B=Birds, R=Reptiles, A=Amphibians)
DF.TraitsList_st <- list(M=Mammals_st, B=Birds_st, R=Reptiles_st, A=Amphibians_st)
Taxinfo.List <- list(M="Order", B="Order", R="Order", A="Order")
Cont.TraitsList_st <- list(M=MammalsCont_st, B=BirdsCont_st, R=ReptilesCont_st, A=AmphibiansCont_st)
Cont.TraitsList <- list(M=MammalsCont, B=BirdsCont, R=ReptilesCont, A=AmphibiansCont)
Cat.TraitsList <- list(M=Traits_cat, B=Traits_cat, R=Traits_cat[Traits_cat %nin% Diet], A=Traits_cat)
EV.List <- list(M="EV_1", B="EV_1", R="EV_1", A="EV_1")
ErrorTrue.List <- list(M=TRUE, B=TRUE, R=TRUE, A=TRUE)
DietTRUE.List <- list(M=TRUE, B=TRUE, R=FALSE, A=TRUE)
std.List_st <- list(M=TRUE, B=TRUE, R=TRUE, A=TRUE)
std.List <- list(M=FALSE, B=FALSE, R=FALSE, A=FALSE)
# On each cluster, imputation of 4 datasets (one for each class).
ArgumentsList_st <- list(TraitDF=DF.TraitsList_st,
Taxinfo=Taxinfo.List,
Traits_cont=Cont.TraitsList_st,
Traits_cat=Cat.TraitsList,
EV=EV.List,
ErrorTrue=ErrorTrue.List,
DietTRUE=DietTRUE.List,
std=std.List_st)
ArgumentsList <- list(TraitDF=DF.TraitsList,
Taxinfo=Taxinfo.List,
Traits_cont=Cont.TraitsList,
Traits_cat=Cat.TraitsList,
EV=EV.List,
ErrorTrue=ErrorTrue.List,
DietTRUE=DietTRUE.List,
std=std.List)
N <- 8
To_impute_parallel_st <- rep(list(ArgumentsList_st), N)
To_impute_parallel <- rep(list(ArgumentsList), N)
rm(Mammals, Birds, Reptiles, Amphibians,
Mammals_st, Birds_st, Reptiles_st, Amphibians_st,
Habitat, Diet, Taxinfo, Traits_cont, Traits_cat, Traits_cont_st,
MammalsCont, BirdsCont, ReptilesCont, AmphibiansCont,
MammalsCont_st, BirdsCont_st, ReptilesCont_st, AmphibiansCont_st,
DF.TraitsList, DF.TraitsList_st, Taxinfo.List, Cont.TraitsList, Cat.TraitsList, Cont.TraitsList_st,
EV.List, ErrorTrue.List, DietTRUE.List, N, std.List, std.List_st,
ArgumentsList, ArgumentsList_st)
View(To_impute_parallel_st)
To_impute_parallel_st[[1]][["TraitDF"]]
X <- To_impute_parallel[[3]]
Test <- To_apply_parallel_imputations(X)
X <- To_impute_parallel_st[[3]]
Test2 <- To_apply_parallel_imputations(X)
View(Test)
View(Test2)
glimpse(Test[[1]][[1]])
glimpse(Test2[[1]][[1]])
setdiff(colnames(Test[[2]][[1]], Test[[3]][[1]]))
setdiff(colnames(Test[[2]][[1]]), colnames(Test[[3]][[1]]))
setdiff(colnames(Test[[2]][[1]]), colnames(Test2[[3]][[1]]))
setdiff(colnames(Test2[[2]][[1]]), colnames(Test2[[3]][[1]]))
setdiff(colnames(Test2[[2]][[1]]), colnames(Test[[3]][[1]]))
library(parallel)
# # ## START CLUSTER
Cluster <- makeCluster(detectCores())
## EXCECUTE ANY PRE PROCESSING CODE NECESSARY
clusterEvalQ(Cluster, {
library(dplyr)
library(phytools)
library(missForest)
library(pbmcapply)
library(pbapply)
})
# ## Preamble
`%nin%` <- Negate(`%in%`)
source("Functions_for_missForest_imputations.R")
## Load trait data: transformed and standardised, with phylogenetic imformation as eigenvectors
Mammals_st <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.transformed_traits/Mammals.csv")
Birds_st <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.transformed_traits/Birds.csv")
Amphibians_st <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.transformed_traits/Amphibians.csv")
Reptiles_st <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/4.transformed_traits/Reptiles.csv")
## Load trait data: NOT transformed and NOT standardised, with phylogenetic imformation as eigenvectors
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Reptiles.csv")
# for quickly testing code
Mammals_st <- Mammals_st[c(1:15),]
Birds_st <- Birds_st[c(1:15),]
Amphibians_st <- Amphibians_st[c(1:15),]
Reptiles_st <- Reptiles_st[c(1:15),]
Mammals <- Mammals[c(1:15),]
Birds <- Birds[c(1:15),]
Amphibians <- Amphibians[c(1:15),]
Reptiles <- Reptiles[c(1:15),]
## Define variables for imputations
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
Taxinfo <- "Order"
Traits_cont_st <-  c("log10_Body_mass_g", "log10_Longevity_d", "log10_Litter_size", "sqrt_Diet_breadth",
"Range_size_m2", "sqrt_Habitat_breadth_IUCN")
Traits_cont <-  c("Body_mass_g", "Longevity_d", "Litter_size", "Diet_breadth",
"Range_size_m2", "Habitat_breadth_IUCN")
Traits_cat <- c(Habitat, "Specialisation",
"Diel_activity","Trophic_level", Diet, "Primary_diet")
## Add some traits for each taxon
MammalsCont_st <- c(Traits_cont_st, "log10_Generation_length_d", "log10_Adult_svl_cm")
BirdsCont_st <- Traits_cont_st
ReptilesCont_st <- c(Traits_cont_st, "log10_Adult_svl_cm", "log10_Maturity_d")
AmphibiansCont_st <- c(Traits_cont_st, "log10_Body_length_mm")
MammalsCont <- c(Traits_cont, "Generation_length_d", "Adult_svl_cm")
BirdsCont <- Traits_cont
ReptilesCont <- c(Traits_cont, "Adult_svl_cm", "Maturity_d")
AmphibiansCont <- c(Traits_cont, "Body_length_mm")
## Function arguments as lists, nested into one bigger list - each of these list elements are agurments for the function Imputations_missForest
DF.TraitsList <- list(M=Mammals, B=Birds, R=Reptiles, A=Amphibians)
DF.TraitsList_st <- list(M=Mammals_st, B=Birds_st, R=Reptiles_st, A=Amphibians_st)
Taxinfo.List <- list(M="Order", B="Order", R="Order", A="Order")
Cont.TraitsList_st <- list(M=MammalsCont_st, B=BirdsCont_st, R=ReptilesCont_st, A=AmphibiansCont_st)
Cont.TraitsList <- list(M=MammalsCont, B=BirdsCont, R=ReptilesCont, A=AmphibiansCont)
Cat.TraitsList <- list(M=Traits_cat, B=Traits_cat, R=Traits_cat[Traits_cat %nin% Diet], A=Traits_cat)
EV.List <- list(M="EV_1", B="EV_1", R="EV_1", A="EV_1")
ErrorTrue.List <- list(M=TRUE, B=TRUE, R=TRUE, A=TRUE)
DietTRUE.List <- list(M=TRUE, B=TRUE, R=FALSE, A=TRUE)
std.List_st <- list(M=TRUE, B=TRUE, R=TRUE, A=TRUE)
std.List <- list(M=FALSE, B=FALSE, R=FALSE, A=FALSE)
# List of function arguments. This list  will be replicated 8 times (number of cores) for parallel imputations.
# On each cluster, imputation of 4 datasets (one for each class).
ArgumentsList_st <- list(TraitDF=DF.TraitsList_st,
Taxinfo=Taxinfo.List,
Traits_cont=Cont.TraitsList_st,
Traits_cat=Cat.TraitsList,
EV=EV.List,
ErrorTrue=ErrorTrue.List,
DietTRUE=DietTRUE.List,
std=std.List_st)
ArgumentsList <- list(TraitDF=DF.TraitsList,
Taxinfo=Taxinfo.List,
Traits_cont=Cont.TraitsList,
Traits_cat=Cat.TraitsList,
EV=EV.List,
ErrorTrue=ErrorTrue.List,
DietTRUE=DietTRUE.List,
std=std.List)
# Replicate this list N times so that: list with N elements, each of these are ArgumentsLists
N <- 8
To_impute_parallel_st <- rep(list(ArgumentsList_st), N)
To_impute_parallel <- rep(list(ArgumentsList), N)
rm(Mammals, Birds, Reptiles, Amphibians,
Mammals_st, Birds_st, Reptiles_st, Amphibians_st,
Habitat, Diet, Taxinfo, Traits_cont, Traits_cat, Traits_cont_st,
MammalsCont, BirdsCont, ReptilesCont, AmphibiansCont,
MammalsCont_st, BirdsCont_st, ReptilesCont_st, AmphibiansCont_st,
DF.TraitsList, DF.TraitsList_st, Taxinfo.List, Cont.TraitsList, Cat.TraitsList, Cont.TraitsList_st,
EV.List, ErrorTrue.List, DietTRUE.List, N, std.List, std.List_st,
ArgumentsList, ArgumentsList_st)
## Export variables in all clusters
clusterExport(cl=Cluster, list("Imputations_missForest",
"To_apply_parallel_imputations",
"To_impute_parallel_st",
"To_impute_parallel",
"%nin%"),
envir=environment())
## Parallel imputations on 8 cores
Imputed_sets_st <- parLapply(cl=Cluster,
X=To_impute_parallel_st,
fun=To_apply_parallel_imputations)
Imputed_sets <- parLapply(cl=Cluster,
X=To_impute_parallel,
fun=To_apply_parallel_imputations)
## Parallel imputations on 8 cores
sytem.time(Imputed_sets_st <- parLapply(cl=Cluster,
X=To_impute_parallel_st,
fun=To_apply_parallel_imputations))
## Parallel imputations on 8 cores
system.time(Imputed_sets_st <- parLapply(cl=Cluster,
X=To_impute_parallel_st,
fun=To_apply_parallel_imputations))
system.time(Imputed_sets <- parLapply(cl=Cluster,
X=To_impute_parallel,
fun=To_apply_parallel_imputations))
## DESTROY CLUSTER
stopCluster(Cluster)
View(Imputed_sets_st)
View(Imputed_sets)
