Delta$W_pvalue <- wilcox.test(mu=Delta$delta_obs[i], Simulations[,i], conf.int=TRUE)
wilcox.test(mu=Delta$delta_obs[i], Simulations[,i], conf.int=TRUE)
DeltaBirds
wilcox.test(mu=Delta$delta_obs[i], Simulations[,i], conf.int=TRUE)
wilcox.test(mu=Delta$delta_obs[i], Simulations[,i])
wilcox.test(mu=Delta$delta_obs[i], Simulations[,i])["p.value"]
Delta
wilcox.test(mu=Delta$delta_obs[i], Simulations[,i])["statistic"]
wilcox.test(mu=Delta$delta_obs[i], Simulations[,i], conf.int = TRUE)
wilcox.test(mu=Delta$delta_obs[i], Simulations[,i], conf.int = TRUE)["median"]
wilcox.test(mu=Delta$delta_obs[i], Simulations[,i], conf.int = TRUE)["(pseudo)median"]
DeltaBirds
10^5
## Function to run Wilcoxon Rank Sum and Signed rank tests
## Testing whether the observed median is significantly different from the null distribution
Wilcox_Test <- function(Simulations, Delta) {
Simulations = SimBirds; colnames(Simulations)
Delta = DeltaBirds; rownames(Delta)
Delta <- Delta %>%
select(delta_obs)
for (i in 1:nrow(Delta)) {
Delta$W_pvalue[i] <- wilcox.test(mu=Delta$delta_obs[i], Simulations[,i])["p.value"]
Delta$W_statistic[i] <- wilcox.test(mu=Delta$delta_obs[i], Simulations[,i])["statistic"]
}
return(Delta)
}
## Function to run Wilcoxon Rank Sum and Signed rank tests
## Testing whether the observed median is significantly different from the null distribution
Wilcox_Test <- function(Simulations, Delta) {
Delta <- Delta %>%
select(delta_obs)
for (i in 1:nrow(Delta)) {
Delta$W_pvalue[i] <- wilcox.test(mu=Delta$delta_obs[i], Simulations[,i])["p.value"]
Delta$W_statistic[i] <- wilcox.test(mu=Delta$delta_obs[i], Simulations[,i])["statistic"]
}
return(Delta)
}
Wilcox_Test(SimBirds, DeltaBirds)
# Wilcoxon Tests
WBirds <- Wilcox_Test(SimBirds, DeltaBirds)
WReptiles <- Wilcox_Test(SimReptiles, DeltaReptiles)
WMammals <- Wilcox_Test(SimMammal, DeltaMammal)
WReptiles
WMammals
WBirds <- Wilcox_Test(SimBirds, DeltaBirds); WBirds$Class <- "Birds"
WReptiles <- Wilcox_Test(SimReptiles, DeltaReptiles); WReptiles$Class <- "Reptiles"
WMammals <- Wilcox_Test(SimMammal, DeltaMammal); WMammals$Class <- "Mammals"
WTests <- rbind(WBirds, WReptiles, WMammals)
WTests
## Function to run Wilcoxon Rank Sum and Signed rank tests
## Testing whether the observed median is significantly different from the null distribution
Wilcox_Test <- function(Simulations, Delta) {
Delta <- Delta %>%
select(delta_obs)
for (i in 1:nrow(Delta)) {
Delta$W_pvalue[i] <- wilcox.test(mu=Delta$delta_obs[i], Simulations[,i], alternative="less")["p.value"]
Delta$W_statistic[i] <- wilcox.test(mu=Delta$delta_obs[i], Simulations[,i], alternative="less")["statistic"]
}
return(Delta)
}
WBirds <- Wilcox_Test(SimBirds, DeltaBirds); WBirds$Class <- "Birds"
WReptiles <- Wilcox_Test(SimReptiles, DeltaReptiles); WReptiles$Class <- "Reptiles"
WMammals <- Wilcox_Test(SimMammal, DeltaMammal); WMammals$Class <- "Mammals"
WTests <- rbind(WBirds, WReptiles, WMammals)
WTests
## Function to run Wilcoxon Rank Sum and Signed rank tests
## Testing whether the observed median is significantly different from the null distribution
Wilcox_Test <- function(Simulations, Delta) {
Delta <- Delta %>%
select(delta_obs)
for (i in 1:nrow(Delta)) {
Delta$W_pvalue[i] <- wilcox.test(Simulations[,i], mu=Delta$delta_obs[i], , alternative="less")["p.value"]
Delta$W_statistic[i] <- wilcox.test(Simulations[,i], mu=Delta$delta_obs[i], alternative="less")["statistic"]
}
return(Delta)
}
## Function to run Wilcoxon Rank Sum and Signed rank tests
## Testing whether the observed median is significantly different from the null distribution
Wilcox_Test <- function(Simulations, Delta) {
Delta <- Delta %>%
select(delta_obs)
for (i in 1:nrow(Delta)) {
Delta$W_pvalue[i] <- wilcox.test(Simulations[,i], mu=Delta$delta_obs[i], alternative="less")["p.value"]
Delta$W_statistic[i] <- wilcox.test(Simulations[,i], mu=Delta$delta_obs[i], alternative="less")["statistic"]
}
return(Delta)
}
WBirds <- Wilcox_Test(SimBirds, DeltaBirds); WBirds$Class <- "Birds"
WReptiles <- Wilcox_Test(SimReptiles, DeltaReptiles); WReptiles$Class <- "Reptiles"
WMammals <- Wilcox_Test(SimMammal, DeltaMammal); WMammals$Class <- "Mammals"
WTests <- rbind(WBirds, WReptiles, WMammals)
WTests
write.csv("../../Results/1.Traits_before_imputations/Phylogenetic_signal/Categorcialtraits_significance_Wilcoxon.csv", row.names = FALSE)
write.csv(WTests,"../../Results/1.Traits_before_imputations/Phylogenetic_signal/Categorcialtraits_significance_Wilcoxon.csv", row.names = FALSE)
write.csv(WTests,"../../Results/1.Traits_before_imputations/Phylogenetic_signal/Categorcialtraits_significance_Wilcoxon.csv", row.names = FALSE)
WBirds <- Wilcox_Test(SimBirds, DeltaBirds); WBirds$Class <- "Birds"
WReptiles <- Wilcox_Test(SimReptiles, DeltaReptiles); WReptiles$Class <- "Reptiles"
WMammals <- Wilcox_Test(SimMammal, DeltaMammal); WMammals$Class <- "Mammals"
WTests <- rbind(WBirds, WReptiles, WMammals)
write.csv(WTests,"../../Results/1.Traits_before_imputations/Phylogenetic_signal/Categorcialtraits_significance_Wilcoxon.csv", row.names = FALSE)
View(WTests)
Delta$W_statistic[i] <- wilcox.test(Simulations[,i], mu=Delta$delta_obs[i], alternative="less")["statistic"]%>% as.numeric()
## Function to run Wilcoxon Rank Sum and Signed rank tests
## Testing whether the observed median is significantly different from the null distribution
Wilcox_Test <- function(Simulations, Delta) {
Delta <- Delta %>%
select(delta_obs)
for (i in 1:nrow(Delta)) {
Delta$W_pvalue[i] <- wilcox.test(Simulations[,i], mu=Delta$delta_obs[i], alternative="less")["p.value"] %>% as.numeric()
Delta$W_statistic[i] <- wilcox.test(Simulations[,i], mu=Delta$delta_obs[i], alternative="less")["statistic"]%>% as.numeric()
}
return(Delta)
}
WBirds <- Wilcox_Test(SimBirds, DeltaBirds); WBirds$Class <- "Birds"
WReptiles <- Wilcox_Test(SimReptiles, DeltaReptiles); WReptiles$Class <- "Reptiles"
WMammals <- Wilcox_Test(SimMammal, DeltaMammal); WMammals$Class <- "Mammals"
WTests <- rbind(WBirds, WReptiles, WMammals)
WTests
write.csv(WTests,"../../Results/1.Traits_before_imputations/Phylogenetic_signal/Categorcialtraits_significance_Wilcoxon.csv", row.names = FALSE)
library(dplyr)
library(phytools)
library(picante)
library(geiger)
library(ape)
library(pbmcapply)
library(pbapply)
library(parallel)
library(dplyr)
library(phytools)
# Load phylogenies
Phylo_Mammals <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Mammals.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Amphibians <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Amphibians.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Reptiles <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Reptiles.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Birds <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Birds.nwk") %>% .Format_tiplabels()  %>% compute.brlen()
is.binary(Phylo_Birds)
# Function to format phylogeny tip labels (from Genus_species to Genus species format)
.Format_tiplabels <- function (Phylogeny) {
Phylogeny$tip.label <- gsub("_", " ", Phylogeny$tip.label)
return(Phylogeny)
}
Phylo_Mammals <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Mammals.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Amphibians <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Amphibians.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Reptiles <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Reptiles.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Birds <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Birds.nwk") %>% .Format_tiplabels()  %>% compute.brlen()
is.binary(Phylo_Birds)
is.binary(Phylo_Mammals)
is.binary(Phylo_Reptiles)
is.binary(Phylo_Amphibians)
?multi2di
# Need to resolve polytomies for amphibians
Phylo_Amphibians <- multi2di(Phylo_Amphibians)
is.binary(Phylo_Amphibians)
source('~/PhD/PhD_R_work/1.Trait_compilation/Code/2.Imputations/2.1.Assess_phylo_signal.R', echo=TRUE)
At
delta_Amphibians_categorical
## For amphibians need to  sort out polytomies
start_time <- Sys.time()
delta_Amphibians_categorical <- parApply(Cluster, Amphibians[, Categorical.Traits], 2, PhySignal_Cat, Names=Names.Amphibians, Phylo=Phylo_Amphibians, n=100)
## DESTROY CLUSTER
stopCluster(Cluster)
source('~/PhD/PhD_R_work/1.Trait_compilation/Code/2.Imputations/2.1.Assess_phylo_signal.R', echo=TRUE)
## Script to assess the phylogenetic signal in Traits (continuous and categorical)
# TODO phylogenetic signal for categorical traits
## Code is parallelised
library(parallel)
library(dplyr)
library(phytools)
## START CLUSTER
Cluster <- makeCluster(detectCores())
## EXCECUTE ANY PRE PROCESSING CODE NECESSARY
clusterEvalQ(Cluster, {
library(dplyr)
library(phytools)
library(picante)
library(geiger)
library(ape)
library(pbmcapply)
library(pbapply)
source("Functions_Borges_et_al_2018_delta_statistic.R")
})
## Preamblep-
# Function to format phylogeny tip labels (from Genus_species to Genus species format)
.Format_tiplabels <- function (Phylogeny) {
Phylogeny$tip.label <- gsub("_", " ", Phylogeny$tip.label)
return(Phylogeny)
}
# Function to apply for continuous traits: PhySignal
PhySignal <- function(Traitdata, Names, Phylo) {
names(Traitdata) <- Names # names are binomial species names
Signal <- phytools::phylosig(Phylo, Traitdata, method="lambda", test = TRUE) %>%
unlist
return(Signal)
}
# Function to apply for categorical traits: PhySignal_Cat. Based on Borges et al 2018, Bioinformatics
PhySignal_Cat <- function(Traitdata, Names, Phylo, n) {
# n = number of simulations
## For the current trait, match and prune phylogeny
names(Traitdata) <- Names
Match <- match.phylo.data(Phylo, Traitdata)
Phylo <- Match$phy
Trait <- Match$data
rm(Match)
## Priors and parameters
lambda0 <- 0.1   #rate parameter of the proposal
se      <- 0.5   #standard deviation of the proposal
sim     <- 10000 #number of iterations
thin    <- 10    #we kept only each 10th iterate
burn    <- 100   #100 iterates are burned-in
## Run the function (Borges et al, 2018, Bioinformatics: Measuring phylogenetic signal between categorical traits and phylogenies)
## with trycatch to avoid the process crashing when encountering errors.
Delta <- tryCatch(expr={delta(Trait, Phylo, lambda0, se, sim, thin, burn)}, error = function(e) {NA})
## If the signal is not NA, then calculate a null distribution of delta values for the trait
if(!is.na(Delta)) {
# Generate randomised trait values - n times to generate a null distribution of delta -- stored in a list
Func <- function(Trait){
N <- length(Trait)
L <- levels(as.factor(Trait))
return(sample(L, size=N, replace=TRUE))
}
ListRandom <- lapply(rep(list(Trait), n), Func)
Func_delta_toapply <- function(trait, tree, lambda0, se, sim, thin, burn) {
Result <- tryCatch(expr = {delta(trait, tree, lambda0, se, sim, thin, burn)},
error=function(e){NA})
return(Result)
}
Random_Delta <- pbmapply(FUN=Func_delta_toapply,
trait=ListRandom,
tree=rep(list(Phylo), n),
lambda0=rep(list(lambda0), n),
se=rep(list(se), n),
sim=rep(list(sim), n),
thin=rep(list(thin), n),
burn=rep(list(burn), n)) %>%
as.data.frame()
return(list(Delta=Delta, Delta0=Random_Delta))
}
else{return(Delta)}
}
# Read trait data
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Reptiles.csv")
# Load phylogenies
Phylo_Mammals <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Mammals.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Amphibians <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Amphibians.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Reptiles <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Reptiles.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Birds <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Birds.nwk") %>% .Format_tiplabels()  %>% compute.brlen()
# Are there any polytomies in the trees?
is.binary(Phylo_Birds)
is.binary(Phylo_Mammals)
is.binary(Phylo_Reptiles)
is.binary(Phylo_Amphibians)
# Need to resolve polytomies for amphibians (randomly)
Phylo_Amphibians <- multi2di(Phylo_Amphibians)
# Traits
Continuous.Traits <- c("Body_mass_g",
"Longevity_d",
"Litter_size",
"Diet_breadth",
"Range_size_m2",
"Habitat_breadth_IUCN")
Categorical.Traits <- c("Specialisation",
"Trophic_level",
"Diel_activity",
"Primary_diet")
# Names
Names.Mammals <- Mammals$Best_guess_binomial
Names.Birds <- Birds$Best_guess_binomial
Names.Reptiles <- Reptiles$Best_guess_binomial
Names.Amphibians <- Amphibians$Best_guess_binomial
## Export variables in all clusters
clusterExport(cl=Cluster, list(".Format_tiplabels","PhySignal", "PhySignal_Cat",
"Mammals", "Birds", "Reptiles", "Amphibians",
"Phylo_Mammals", "Phylo_Birds", "Phylo_Reptiles", "Phylo_Amphibians",
"Continuous.Traits", "Categorical.Traits",
"Names.Mammals", "Names.Birds", "Names.Reptiles", "Names.Amphibians"), envir=environment())
## PARALLEL CALCULATIONS WITH parApply
## 1. Phylogenetic signal in continuous traits (takes up to 6 hours for birds)
# start_time <- Sys.time()
# Lambda_Mammals_continuous <- parApply(Cluster, Mammals[, c(Continuous.Traits,"Generation_length_d", "Adult_svl_cm")], 2, PhySignal, Names=Names.Mammals, Phylo=Phylo_Mammals) %>% as.data.frame()
# end_time <- Sys.time()
# end_time-start_time
#
# start_time <- Sys.time()
# Lambda_Amphibians_continuous <- parApply(Cluster, Amphibians[, c(Continuous.Traits, "Body_length_mm")], 2, PhySignal, Names=Names.Amphibians, Phylo=Phylo_Amphibians) %>% as.data.frame()
# end_time <- Sys.time()
# end_time-start_time
#
# RC <- Continuous.Traits[-which(Continuous.Traits=="Diet_breadth")]
# start_time <- Sys.time()
# Lambda_Reptiles_continuous <- parApply(Cluster, Reptiles[, c(RC, "Adult_svl_cm", "Maturity_d")], 2, PhySignal, Names=Names.Reptiles, Phylo=Phylo_Reptiles) %>% as.data.frame()
# end_time <- Sys.time()
# end_time-start_time
#
# start_time <- Sys.time()
# Lambda_Birds_continuous <- parApply(Cluster, Birds[, c(Continuous.Traits, "Generation_length_d")], 2, PhySignal, Names=Names.Birds, Phylo=Phylo_Birds) %>% as.data.frame()
# end_time <- Sys.time()
# end_time-start_time
#
## Save files
# write.csv(Lambda_Mammals_continuous, "../../Results/1.Traits_before_imputations/Phylogenetic_signal/ContinuousMammals.csv",row.names = FALSE)
# write.csv(Lambda_Birds_continuous, "../../Results/1.Traits_before_imputations/Phylogenetic_signal/ContinuousBirds.csv",row.names = FALSE)
# write.csv(Lambda_Reptiles_continuous, "../../Results/1.Traits_before_imputations/Phylogenetic_signal/ContinuousReptiles.csv",row.names = FALSE)
# write.csv(Lambda_Amphibians_continuous, "../../Results/1.Traits_before_imputations/Phylogenetic_signal/ContinuousAmphibians.csv",row.names = FALSE)
## 2. Phylogenetic signal in categorical traits
# start_time <- Sys.time()
# delta_Mammals_categorical <- parApply(Cluster, Mammals[, Categorical.Traits], 2, PhySignal_Cat, Names=Names.Mammals, Phylo=Phylo_Mammals, n=100)
# end_time <- Sys.time()
# Mt <- end_time-start_time  # about 1hrs
#
# start_time <- Sys.time()
# delta_Birds_categorical <- parApply(Cluster, Birds[, Categorical.Traits], 2, PhySignal_Cat, Names=Names.Birds, Phylo=Phylo_Birds, n=100)
# end_time <- Sys.time()
# Bt <- end_time-start_time
#
# start_time <- Sys.time()
# delta_Reptiles_categorical <- parApply(Cluster, Reptiles[, Categorical.Traits[-which(Categorical.Traits=="Primary_diet")]], 2, PhySignal_Cat, Names=Names.Reptiles, Phylo=Phylo_Reptiles, n=100)
# end_time <- Sys.time()
# Rt <- end_time-start_time
## For amphibians need to  sort out polytomies
start_time <- Sys.time()
delta_Amphibians_categorical <- parApply(Cluster, Amphibians[, Categorical.Traits], 2, PhySignal_Cat, Names=Names.Amphibians, Phylo=Phylo_Amphibians, n=100)
delta_Amphibians_categorical
## DESTROY CLUSTER
stopCluster(Cluster)
Traitdata=Amphibians$Trophic_level %>% as.vector()
Phylo=Phylo_Amphibians
Names=Amphibians$Best_guess_binomial
## For the current trait, match and prune phylogeny
names(Traitdata) <- Names
Match <- match.phylo.data(Phylo, Traitdata)
Phylo <- Match$phy
Trait <- Match$data
rm(Match)
lambda0 <- 0.1   #rate parameter of the proposal
se      <- 0.5   #standard deviation of the proposal
sim     <- 10000 #number of iterations
thin    <- 10    #we kept only each 10th iterate
burn    <- 100   #100 iterates are burned-in
delta(Trait, Phylo, lambda0, se, sim, thin, burn)
library(dplyr)
library(phytools)
library(picante)
library(geiger)
library(ape)
library(pbmcapply)
library(pbapply)
source("Functions_Borges_et_al_2018_delta_statistic.R")
library(parallel)
library(dplyr)
library(phytools)
Traitdata=Amphibians$Trophic_level %>% as.vector()
Phylo=Phylo_Amphibians
Names=Amphibians$Best_guess_binomial
Traitdata
Phylo
is.binary(Phylo)
names(Traitdata) <- Names
Match <- match.phylo.data(Phylo, Traitdata)
Phylo <- Match$phy
Trait <- Match$data
rm(Match)
lambda0 <- 0.1   #rate parameter of the proposal
se      <- 0.5   #standard deviation of the proposal
sim     <- 10000 #number of iterations
thin    <- 10    #we kept only each 10th iterate
burn    <- 100
delta(Trait, Phylo, lambda0, se, sim, thin, burn)
Phylo$edge.length
Phylo$edge.length[Phylo$edge.length<=0]
10e-50
Phylo$edge.length[Phylo$edge.length<=0] <- 10e-50
delta(Trait, Phylo, lambda0, se, sim, thin, burn)
Phylo_Mammals$edge.length[Phylo_Mammals$edge.length<=0]
Phylo_Reptiles$edge.length[Phylo_Reptiles$edge.length<=0]
## DESTROY CLUSTER
stopCluster(Cluster)
source('~/PhD/PhD_R_work/1.Trait_compilation/Code/2.Imputations/2.1.Assess_phylo_signal.R', echo=TRUE)
At
delta_Amphibians_categorical
saveRDS(delta_Amphibians_categorical, "../../Results/1.Traits_before_imputations/Phylogenetic_signal/CategoricalAmphibians.rds")
Amphibians <- readRDS("../../Results/1.Traits_before_imputations/Phylogenetic_signal/CategoricalAmphibians.rds")
View(Amphibians)
Traitdata=Mammals$Primary_diet %>% as.vector()
Traitdata=Mammals$Primary_diet %>% as.vector()
Phylo=Phylo_Mammals
Names=Mammals$Best_guess_binomial
## For the current trait, match and prune phylogeny
names(Traitdata) <- Names
Match <- match.phylo.data(Phylo, Traitdata)
Phylo <- Match$phy
Trait <- Match$data
rm(Match)
lambda0 <- 0.1   #rate parameter of the proposal
se      <- 0.5   #standard deviation of the proposal
sim     <- 10000 #number of iterations
thin    <- 10    #we kept only each 10th iterate
burn    <- 100   #100 iterates are burned-in
delta(Trait, Phylo, lambda0, se, sim, thin, burn)
source("Functions_Borges_et_al_2018_delta_statistic.R")
delta(Trait, Phylo, lambda0, se, sim, thin, burn)
## Phylogenetic signal for categorical traits: testing the difference from null distribution of delta values
library(gmodels)
library(ggplot2)
library(dplyr)
library(boot)
library(ggpubr)
## Function to plot the distribution of null values, calculate mean and 95% CI for all categorical traits
Comparison_null_dist <- function(List, Catraits) {
# Dataset of observed signal
Delta <- vector()
for (i in 1:length(Catraits)) {
Delta <- c(Delta, List[[Catraits[i]]][1]) %>%
as.data.frame() %>%
t
}
rownames(Delta) <- Catraits
colnames(Delta) <- "delta_obs"
Delta <- as.data.frame(Delta)
# Add simulation means and 95% CI
n <- List[[Catraits[1]]][2]$Delta0 %>% nrow
Simulations <- as.data.frame(matrix(nrow=n, ncol=length(Catraits)))
colnames(Simulations) <- Catraits
for (i in 1:length(Catraits)) {
Sim <- List[[Catraits[i]]][2]$Delta0 %>% as.vector()
colnames(Sim) <- "Simulated"
Delta$MedianSim[i] <- median(Sim$Simulated, na.rm=TRUE)
# 95% ci for the median (bootstrapping)
bootmed <- apply(matrix(sample(Sim$Simulated, rep=TRUE, 10^5*length(Sim$Simulated)), nrow=10^5), 1, median, na.rm=TRUE)
X <- quantile(bootmed, c(.025, 0.975), na.rm=TRUE)
Delta$CI_up[i] <- X[2]
Delta$CI_low[i]<- X[1]
Simulations[,i] <- Sim
}
return(list(Delta, Simulations))
}
## Function to plot results
Plot_Delta <- function(Delta) {
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=13, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,2,0,"pt"), size=13),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=13),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=13))
Delta$Trait <- rownames(Delta)
p <- ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MedianSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.3, col="blue") +
scale_y_continuous(trans="log10") +
GGPoptions
return(p)
}
## Function to run Wilcoxon Rank Sum and Signed rank tests
## Testing whether the observed median is significantly different from the null distribution
Wilcox_Test <- function(Simulations, Delta) {
Delta <- Delta %>%
select(delta_obs)
for (i in 1:nrow(Delta)) {
Delta$W_pvalue[i] <- wilcox.test(Simulations[,i], mu=Delta$delta_obs[i], alternative="less")["p.value"] %>% as.numeric()
Delta$W_statistic[i] <- wilcox.test(Simulations[,i], mu=Delta$delta_obs[i], alternative="less")["statistic"]%>% as.numeric()
}
return(Delta)
}
Mammals <- readRDS("../../Results/1.Traits_before_imputations/Phylogenetic_signal/CategoricalMammals.rds")
Birds <- readRDS("../../Results/1.Traits_before_imputations/Phylogenetic_signal/CategoricalBirds.rds")
Reptiles <- readRDS("../../Results/1.Traits_before_imputations/Phylogenetic_signal/CategoricalReptiles.rds")
Amphibians <- readRDS("../../Results/1.Traits_before_imputations/Phylogenetic_signal/CategoricalAmphibians.rds")
Results_Amphibians <- Comparison_null_dist(Amphibians, c("Specialisation", "Trophic_level", "Diel_activity", "Primary_diet"))
DeltaAmphibians <- Results_Amphibians[[1]]
SimAmphibians <- Results_Amphibians[[2]]
pAmphibians <- Plot_Delta(DeltaAmphibians) + scale_x_discrete(labels=c("DA", "Sp", "TL")) + xlab("") + ylab(expression(delta))
pAmphibians
plot(density(SimAmphibians$Specialisation, na.rm=TRUE))
plot(density(SimAmphibians$Trophic_level, na.rm=TRUE))
plot(density(SimAmphibians$Diel_activity, na.rm=TRUE))
plot(density(SimAmphibians$Primary_diet, na.rm=TRUE))
WAmphibians <- Wilcox_Test(SimAmphibians, DeltaAmphibians); WAmphibians$Class <- "Amphibians"
WAmphibians
source('~/PhD/PhD_R_work/1.Trait_compilation/Code/2.Imputations/2.2.Phylogenetic_signal_categorical_traits.R', echo=TRUE)
Results_Amphibians <- Comparison_null_dist(Amphibians, c("Specialisation", "Trophic_level", "Diel_activity", "Primary_diet"))
DeltaAmphibians <- Results_Amphibians[[1]]
SimAmphibians <- Results_Amphibians[[2]]
pAmphibians <- Plot_Delta(DeltaAmphibians) + scale_x_discrete(labels=c("DA", "Sp", "TL")) + xlab("") + ylab(expression(delta))
plot(density(SimAmphibians$Specialisation, na.rm=TRUE))
plot(density(SimAmphibians$Trophic_level, na.rm=TRUE))
plot(density(SimAmphibians$Diel_activity, na.rm=TRUE))
plot(density(SimAmphibians$Primary_diet, na.rm=TRUE))
p <- ggarrange(pMammals + labs(tag = "A") + theme(plot.tag.position = c(0.95, 0.94)),
pBirds + labs(tag = "B") + theme(plot.tag.position = c(0.95, 0.94)) + ylab(""),
pReptiles + labs(tag = "C") + theme(plot.tag.position = c(0.95, 0.94)),
pAmphibians + labs(tag = "D") + theme(plot.tag.position = c(0.95, 0.94)) + ylab(""))
p
pMammals + labs(tag = "A")
p <- ggarrange(pMammals + labs(tag = "A") + theme(plot.tag.position = c(0.95, 0.94)),
pBirds + labs(tag = "B") + theme(plot.tag.position = c(0.95, 0.94)) + ylab(""),
pReptiles + labs(tag = "C") + theme(plot.tag.position = c(0.95, 0.94)),
pAmphibians + labs(tag = "D") + theme(plot.tag.position = c(0.95, 0.94)) + ylab(""))
p
ggsave(p, file="../../Results/Plots/Phylosignal_categorical/Allclasses.pdf", height=4, width=5)
ggsave(p, file="../../Results/Plots/Phylosignal_categorical/Allclasses.pdf", height=4, width=5)
WBirds <- Wilcox_Test(SimBirds, DeltaBirds); WBirds$Class <- "Birds"
WReptiles <- Wilcox_Test(SimReptiles, DeltaReptiles); WReptiles$Class <- "Reptiles"
WMammals <- Wilcox_Test(SimMammal, DeltaMammal); WMammals$Class <- "Mammals"
WAmphibians <- Wilcox_Test(SimAmphibians, DeltaAmphibians); WAmphibians$Class <- "Amphibians"
WTests <- rbind(WBirds, WReptiles, WMammals)
WTests
WTests <- rbind(WBirds, WReptiles, WMammals, WAmphibians)
WTests
write.csv(WTests,"../../Results/1.Traits_before_imputations/Phylogenetic_signal/Categorcialtraits_significance_Wilcoxon.csv", row.names = FALSE)
