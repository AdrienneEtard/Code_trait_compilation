Delta
List[[Catraits[i]]][2]
Sim <- List[[Catraits[i]]][2]
Delta$MeanSim <- mean(Sim)
List[[Catraits[i]]][2]
Sim <- List[[Catraits[i]]][2] %>% as.vector()
Sim
Delta$MeanSim <- mean(Sim)
View(Sim)
colnames(List[[Catraits[i]]][2])
str(List[[Catraits[i]]][2])
Sim <- List[[Catraits[i]]][2]$. %>% as.vector()
Sim
Sim <- List[[Catraits[i]]][2]$` .` %>% as.vector()
Sim
List[[Catraits[i]]][2]
Sim <- List[[Catraits[i]]][2]$Delta0 %>% as.vector()
Sim
mean(Sim)
View(Sim)
colnames(Sim) <- "Simulated"
Delta$MeanSim <- mean(Sim$Simulated)
Delta
Delta <- vector()
for (i in 1:length(Catraits)) {
Delta <- c(Delta, List[[Catraits[i]]][1]) %>%
as.data.frame() %>%
t
}
rownames(Delta) <- Catraits
colnames(Delta) <- "delta_obs"
Delta
# Dataset of observed signal
Delta <- vector()
for (i in 1:length(Catraits)) {
Delta <- c(Delta, List[[Catraits[i]]][1]) %>%
as.data.frame() %>%
t %>%
as.data.frame()
}
rownames(Delta) <- Catraits
colnames(Delta) <- "delta_obs"
Delta
Delta <- vector()
for (i in 1:length(Catraits)) {
Delta <- c(Delta, List[[Catraits[i]]][1]) %>%
as.data.frame() %>%
t %>%
as.data.frame()
}
rownames(Delta) <- Catraits
colnames(Delta) <- "delta_obs"
Delta
rownames(Delta) <- Catraits
Delta <- vector()
for (i in 1:length(Catraits)) {
Delta <- c(Delta, List[[Catraits[i]]][1]) %>%
as.data.frame() %>%
t
}
Delta
rownames(Delta) <- Catraits
colnames(Delta) <- "delta_obs"
Delta
Delta <- as.data.frame(Delta)
Delta
## DESTROY CLUSTER
stopCluster(Cluster)
for (i in 1:length(Catraits)) {
Sim <- List[[Catraits[i]]][2]$Delta0 %>% as.vector()
colnames(Sim) <- "Simulated"
Delta$MeanSim[i] <- mean(Sim$Simulated)
}
Delta
for (i in 1:length(Catraits)) {
Sim <- List[[Catraits[i]]][2]$Delta0 %>% as.vector()
colnames(Sim) <- "Simulated"
Delta$MeanSim[i] <- mean(Sim$Simulated, na.rm=TRUE)
}
Delta
hist(Sim$Simulated)
plot(density(Sim$Simulated))
i
Sim
# Add simulation means and 95% CI
n <- List[[Catraits[1]]][2]$Delta0 %>% length
n
# Add simulation means and 95% CI
n <- List[[Catraits[1]]][2]$Delta0 %>% nrow
n
Simulations <- as.data.frame(matrix(nrow=length(n), ncol=length(Catraits)))
View(Simulations)
# Add simulation means and 95% CI
n <- List[[Catraits[1]]][2]$Delta0 %>% nrow
n
Simulations <- as.data.frame(matrix(nrow=n, ncol=length(Catraits)))
colnames(Simulations) <- Catraits
## Phylogenetic signal for categorical traits: testing the difference from null distribution of delta values
library(gmodels)
ci(Sim, confidence=0.95)
ci(Sim$Simulated, confidence=0.95)
i
Delta
Delta$CI_up[i] <- ci(Sim$Simulated, confidence=0.95)[3]
Delta$CI_low[i]<- ci(Sim$Simulated, confidence=0.95)[2]
Delta
Comparison_null_dist <- function(List, Catraits) {
# Dataset of observed signal
Delta <- vector()
for (i in 1:length(Catraits)) {
Delta <- c(Delta, List[[Catraits[i]]][1]) %>%
as.data.frame() %>%
t
}
rownames(Delta) <- Catraits
colnames(Delta) <- "delta_obs"
Delta <- as.data.frame(Delta)
# Add simulation means and 95% CI
n <- List[[Catraits[1]]][2]$Delta0 %>% nrow
Simulations <- as.data.frame(matrix(nrow=n, ncol=length(Catraits)))
colnames(Simulations) <- Catraits
for (i in 1:length(Catraits)) {
Sim <- List[[Catraits[i]]][2]$Delta0 %>% as.vector()
colnames(Sim) <- "Simulated"
Delta$MeanSim[i] <- mean(Sim$Simulated, na.rm=TRUE)
Delta$CI_up[i] <- ci(Sim$Simulated, confidence=0.95)[3]
Delta$CI_low[i]<- ci(Sim$Simulated, confidence=0.95)[2]
Simulations[i, ] <- Sim
}
return(list(Delta, Simulations))
}
Results_Mammals <- Comparison_null_dist(Mammals, c("Specialisation", "Trophic_level", "Diel_activity"))
Results_Mammals[[1]]
DeltaMammal <- Results_Mammals[[1]]
DeltaMammal
## Function to plot the distribution of null values, calculate mean and 95% CI for all categorcial traits
Comparison_null_dist <- function(List, Catraits) {
# Dataset of observed signal
Delta <- vector()
for (i in 1:length(Catraits)) {
Delta <- c(Delta, List[[Catraits[i]]][1]) %>%
as.data.frame() %>%
t
}
rownames(Delta) <- Catraits
colnames(Delta) <- "delta_obs"
Delta <- as.data.frame(Delta)
# Add simulation means and 95% CI
n <- List[[Catraits[1]]][2]$Delta0 %>% nrow
Simulations <- as.data.frame(matrix(nrow=n, ncol=length(Catraits)))
colnames(Simulations) <- Catraits
for (i in 1:length(Catraits)) {
Sim <- List[[Catraits[i]]][2]$Delta0 %>% as.vector()
colnames(Sim) <- "Simulated"
Delta$MeanSim[i] <- mean(Sim$Simulated, na.rm=TRUE)
Delta$CI_up[i] <- ci(Sim$Simulated, confidence=0.95, na.rm = TRUE)[3]
Delta$CI_low[i]<- ci(Sim$Simulated, confidence=0.95, na.rm = TRUE)[2]
Simulations[i, ] <- Sim
}
return(list(Delta, Simulations))
}
# Mammals
Results_Mammals <- Comparison_null_dist(Mammals, c("Specialisation", "Trophic_level", "Diel_activity"))
DeltaMammal <- Results_Mammals[[1]]
DeltaMammal
SimMammal <- Results_Mammals[[2]]
library(ggplot2)
Delta=DeltaMammal
Delta$Trait <- rownames(Delta)
ggplot(Delta, aes(delta_obs, Trait)) + geom_point()
ggplot(Delta, aes(delta_obs, Trait)) +
geom_point() +
geom_errorbar(aes(xmin=CI_low, xmax=CI_up), width=.1)
ggplot(Delta, aes(delta_obs, Trait)) +
geom_point() +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.1)
p <- ggplot(Delta, aes(delta_obs, Trait)) +
geom_point() +
geom_point(MeanSim) +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.1)
p <- ggplot(Delta, aes(delta_obs, Trait)) +
geom_point() +
geom_point(aes(MeanSim)) +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.1)
ggplot(Delta, aes(delta_obs, Trait)) +
geom_point() +
geom_point(aes(MeanSim)) +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.1)
p <- ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() +
geom_point(aes(MeanSim)) +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.1)
p
min(Dleta)
min(Delta)
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low, max(Delta$CI_up)))
geom_point(aes(MeanSim)) +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.1)
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$CI_up))
geom_point(aes(MeanSim)) +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.1)
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$CI_up)) +
geom_point(aes(MeanSim)) +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.1)
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(MeanSim)) +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.1)
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point()
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1)
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1)
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(MeanSim, col="blue"))
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue")
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.1)
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up))
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.5)
ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.3)
p <- ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.3, col="blue")
p
p <- ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.3, col="blue") +
scale_y_continuous(trans="log10")
p
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=20, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,2,0,"pt"), size=20),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=20),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=20))
Delta$Trait <- rownames(Delta)
p <- ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.3, col="blue") +
scale_y_continuous(trans="log10") +
GGOptions
p <- ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.3, col="blue") +
scale_y_continuous(trans="log10") +
GGPoptions
p
p <- ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.3, col="blue", size=1) +
scale_y_continuous(trans="log10") +
GGPoptions
p
# Plotting results
Plot_Delta <- function(Delta) {
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=13, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,2,0,"pt"), size=13),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=13),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=13))
Delta$Trait <- rownames(Delta)
p <- ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.3, col="blue", size=1) +
scale_y_continuous(trans="log10") +
GGPoptions
return(p)
}
pMammals <- Plot_Delta(DeltaMammal)
pMammals
pMammals <- Plot_Delta(DeltaMammal) + scale_y_discrete(labels=c("DA", "Sp", "TL"))
pMammals
pMammals <- Plot_Delta(DeltaMammal) + scale_x_discrete(labels=c("DA", "Sp", "TL"))
pMammals
pMammals <- Plot_Delta(DeltaMammal) + scale_x_discrete(labels=c("DA", "Sp", "TL")) + xlab("")
pMammals
pMammals <- Plot_Delta(DeltaMammal) + scale_x_discrete(labels=c("DA", "Sp", "TL")) + xlab("") + ylab(expression(delta))
pMammals
plot(density(SimMammal$Specialisation))
plot(density(SimMammal$Specialisation, na.rm=TRUE))
plot(density(SimMammal$Trophic_level, na.rm=TRUE))
plot(density(SimMammal$Diel_activity, na.rm=TRUE))
View(SimMammal)
## Function to plot the distribution of null values, calculate mean and 95% CI for all categorcial traits
Comparison_null_dist <- function(List, Catraits) {
# Dataset of observed signal
Delta <- vector()
for (i in 1:length(Catraits)) {
Delta <- c(Delta, List[[Catraits[i]]][1]) %>%
as.data.frame() %>%
t
}
rownames(Delta) <- Catraits
colnames(Delta) <- "delta_obs"
Delta <- as.data.frame(Delta)
# Add simulation means and 95% CI
n <- List[[Catraits[1]]][2]$Delta0 %>% nrow
Simulations <- as.data.frame(matrix(nrow=n, ncol=length(Catraits)))
colnames(Simulations) <- Catraits
for (i in 1:length(Catraits)) {
Sim <- List[[Catraits[i]]][2]$Delta0 %>% as.vector()
colnames(Sim) <- "Simulated"
Delta$MeanSim[i] <- mean(Sim$Simulated, na.rm=TRUE)
Delta$CI_up[i] <- ci(Sim$Simulated, confidence=0.95, na.rm = TRUE)[3]
Delta$CI_low[i]<- ci(Sim$Simulated, confidence=0.95, na.rm = TRUE)[2]
Simulations[,i] <- Sim
}
return(list(Delta, Simulations))
}
# Mammals
Results_Mammals <- Comparison_null_dist(Mammals, c("Specialisation", "Trophic_level", "Diel_activity"))
DeltaMammal <- Results_Mammals[[1]]
SimMammal <- Results_Mammals[[2]]
# Plotting results
Plot_Delta <- function(Delta) {
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=13, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,2,0,"pt"), size=13),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=13),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=13))
Delta$Trait <- rownames(Delta)
p <- ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.3, col="blue", size=1) +
scale_y_continuous(trans="log10") +
GGPoptions
return(p)
}
pMammals <- Plot_Delta(DeltaMammal) + scale_x_discrete(labels=c("DA", "Sp", "TL")) + xlab("") + ylab(expression(delta))
pMammals
plot(density(SimMammal$Specialisation, na.rm=TRUE))
plot(density(SimMammal$Trophic_level, na.rm=TRUE))
plot(density(SimMammal$Diel_activity, na.rm=TRUE))
pMammals
ggsave(pMammals, file="../../Results/Plots/Phylosignal_categorical/Mammals.pdf", heigth=4, width=4)
ggsave(pMammals, file="../../Results/Plots/Phylosignal_categorical/Mammals.pdf", height=4, width=4)
# Plotting results
Plot_Delta <- function(Delta) {
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=13, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,2,0,"pt"), size=13),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=13),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=13))
Delta$Trait <- rownames(Delta)
p <- ggplot(Delta, aes(Trait, delta_obs)) +
geom_point() + ylim(min(Delta$CI_low), max(Delta$delta_obs)+1) +
geom_point(aes(Trait, MeanSim), col="blue") +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=0.3, col="blue") +
scale_y_continuous(trans="log10") +
GGPoptions
return(p)
}
pMammals <- Plot_Delta(DeltaMammal) + scale_x_discrete(labels=c("DA", "Sp", "TL")) + xlab("") + ylab(expression(delta))
ggsave(pMammals, file="../../Results/Plots/Phylosignal_categorical/Mammals.pdf", height=2, width=3)
DeltaMammal
Categorical.Traits
Categorical.Traits <- c("Specialisation",
"Trophic_level",
"Diel_activity",
"Primary_diet")
Categorical.Traits[-which(Categorical.Traits=="Primary_diet")]
library(reshape)
library(ggplot2)
library(dplyr)
library(ggpubr)
library(reshape)
source("Functions_for_results_congruence.R")
Cattraits <- c("Trophic_level", "Diel_activity", "Specialisation", "Primary_diet")
## Function to plot imputation errors for categorical imputed traits: PFC
PlotPFC <- function(PFCErrors) {
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=13, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,2,0,"pt"), size=12),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=12),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=13))
PFC <- melt(PFCErrors)
p <- ggplot(PFC, aes(variable, value, col=Class)) + GGPoptions +
geom_point() +
ylim(0,25)
return(p)
}
GetPFC <- function(Errors, isReptile){
if(!isReptile){Cattraits <- c("Trophic_level", "Diel_activity", "Specialisation", "Primary_diet")}
else{Cattraits <- c("Trophic_level", "Diel_activity", "Specialisation")}
Y <- which(colnames(Errors) %in% paste(Cattraits, "PFC", sep=" "))
PFC <- Errors[,Y]*100
return(PFC)
}
## Load imputed datasets (8); retrieve errors
Imputed <- readRDS("../../Results/2.Imputed_trait_datasets/Imputed_not_standardised/List_of_8_sets.rds")
Amphibians <- Get_all_results(Imputed, "A")$Errors
Errors_amp <- data.table::rbindlist(Amphibians)%>% as.data.frame()
Reptiles <- Get_all_results(Imputed, "R")$Errors
Errors_rep <- data.table::rbindlist(Reptiles)%>% as.data.frame()
Mammals <- Get_all_results(Imputed, "M")$Errors
Errors_mam <- data.table::rbindlist(Mammals)%>% as.data.frame()
Birds <- Get_all_results(Imputed, "B")$Errors
Errors_bir <- data.table::rbindlist(Birds)%>% as.data.frame()
PFC_amp <- GetPFC(Errors_amp, FALSE); PFC_amp$Class <- "Amphibians"
PFC_rep <- GetPFC(Errors_rep, FALSE); PFC_rep$`Primary_diet PFC` <- NA;  PFC_rep$Class <- "Reptiles"
PFC_mam <- GetPFC(Errors_mam, FALSE); PFC_mam$Class <- "Mammals"
PFC_bir <- GetPFC(Errors_bir, FALSE); PFC_bir$Class <- "Birds"
PFC_all <- rbind(PFC_amp, PFC_rep, PFC_mam, PFC_bir)
## Plot PFC for all classes
PlotPFC(PFC_all)
## Function to plot imputation errors for categorical imputed traits: PFC
PlotPFC <- function(PFCErrors) {
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=13, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,2,0,"pt"), size=12),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=12),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=13))
PFC <- melt(PFCErrors)
p <- ggplot(PFC, aes(variable, value, col=Class)) + GGPoptions +
geom_point() +
ylim(0,25) +
scale_y_continuous(trans="log10") +
scale_x_discrete(labels=c("DA", "TL", "PD", "Sp"))
return(p)
}
## Plot PFC for all classes
PlotPFC(PFC_all)
## Function to plot imputation errors for categorical imputed traits: PFC
PlotPFC <- function(PFCErrors) {
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=13, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,2,0,"pt"), size=12),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=12),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=13))
PFC <- melt(PFCErrors)
p <- ggplot(PFC, aes(variable, value, col=Class)) + GGPoptions +
geom_point() +
ylim(0,25) +
scale_y_continuous(trans="log10", breaks=c(0.01,0.10,1.00,10.00,20.00)) +
scale_x_discrete(labels=c("DA", "TL", "PD", "Sp")) +
xlab("") + ylab("% falsely classified")
return(p)
}
## Plot PFC for all classes
PlotPFC(PFC_all)
ggsave(PFC_all, file="../../Results/Plots/Imputation_errors/PFC.pdf", width=4, height=3)
## Plot PFC for all classes
PlotPFC(PFC_all)
## Plot PFC for all classes
p <- PlotPFC(PFC_all)
ggsave(p, file="../../Results/Plots/Imputation_errors/PFC.pdf", width=4, height=3)
ggsave(p, file="../../Results/Plots/Imputation_errors/PFC.pdf", width=4, height=2.5)
## Function to plot imputation errors for categorical imputed traits: PFC
PlotPFC <- function(PFCErrors) {
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=13, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,2,0,"pt"), size=12),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=12),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=13))
PFC <- melt(PFCErrors)
p <- ggplot(PFC, aes(variable, value, col=Class)) + GGPoptions +
geom_point(alpha=0.5) +
ylim(0,25) +
scale_y_continuous(trans="log10", breaks=c(0.01,0.10,1.00,10.00,20.00)) +
scale_x_discrete(labels=c("DA", "TL", "PD", "Sp")) +
xlab("") + ylab("% falsely classified")
return(p)
}
## Plot PFC for all classes
p <- PlotPFC(PFC_all)
ggsave(p, file="../../Results/Plots/Imputation_errors/PFC.pdf", width=4, height=2.5)
p$data
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Reptiles.csv")
