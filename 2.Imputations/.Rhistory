pRS <- ArrangePlots(pM$pDB, pB$pDB, NULL, pA$pDB, posTagX = 0.3, posTagY = 0.9, FALSE)
pRS
pA <- Plot.Congruence.Continuous(All_Amphibians, Coll_Amphibians, TRUE)
pR <- Plot.Congruence.Continuous(All_Reptiles, Coll_Reptiles, FALSE)
pM <- Plot.Congruence.Continuous(All_Mammals, Coll_Mammals, TRUE)
pB <- Plot.Congruence.Continuous(All_Birds, Coll_Birds, TRUE)
pBM <- ArrangePlots(pM$pBM, pB$pBM, pR$pBM, pA$pBM, posTagX = 0.3, posTagY = 0.9, TRUE)
ggsave(pBM, file="../../Results/Plots/Congruence_imputations/Continuous/PerTrait/BM.pdf", width=6, height = 6)
pLCS <- ArrangePlots(pM$pLCS, pB$pLCS, pR$pLCS, pA$pLCS, posTagX = 0.3, posTagY = 0.9, TRUE)
ggsave(pLCS, file="../../Results/Plots/Congruence_imputations/Continuous/PerTrait/LCS.pdf", width=6, height = 6)
pLG <- ArrangePlots(pM$pLG, pB$pLG, pR$pLG, pA$pLG, posTagX = 0.3, posTagY = 0.9, TRUE)
ggsave(pLG, file="../../Results/Plots/Congruence_imputations/Continuous/PerTrait/LG.pdf", width=6, height = 6)
pHB <- ArrangePlots(pM$pHB, pB$pHB, pR$pHB, pA$pHB, posTagX = 0.3, posTagY = 0.9, TRUE)
ggsave(pHB, file="../../Results/Plots/Congruence_imputations/Continuous/PerTrait/HB.pdf", width=6, height = 6)
pRS <- ArrangePlots(pM$pRS, pB$pRS, pR$pRS, pA$pRS, posTagX = 0.3, posTagY = 0.9, TRUE)
ggsave(pRS, file="../../Results/Plots/Congruence_imputations/Continuous/PerTrait/RS.pdf", width=6, height = 6)
pDB <- ArrangePlots(pM$pDB, pB$pDB, NULL, pA$pDB, posTagX = 0.3, posTagY = 0.9, FALSE)
ggsave(pDB, file="../../Results/Plots/Congruence_imputations/Continuous/PerTrait/DB.pdf", width=6, height = 6)
pBM <- ArrangePlots(pM$pBM, pB$pBM, pR$pBM, pA$pBM, posTagX = 0.3, posTagY = 0.9, TRUE)
ggsave(pBM, file="../../Results/Plots/Congruence_imputations/Continuous/BM.pdf", width=6, height = 6)
pLCS <- ArrangePlots(pM$pLCS, pB$pLCS, pR$pLCS, pA$pLCS, posTagX = 0.3, posTagY = 0.9, TRUE)
ggsave(pLCS, file="../../Results/Plots/Congruence_imputations/Continuous/LCS.pdf", width=6, height = 6)
pLG <- ArrangePlots(pM$pLG, pB$pLG, pR$pLG, pA$pLG, posTagX = 0.3, posTagY = 0.9, TRUE)
ggsave(pLG, file="../../Results/Plots/Congruence_imputations/Continuous/LG.pdf", width=6, height = 6)
pHB <- ArrangePlots(pM$pHB, pB$pHB, pR$pHB, pA$pHB, posTagX = 0.3, posTagY = 0.9, TRUE)
ggsave(pHB, file="../../Results/Plots/Congruence_imputations/Continuous/HB.pdf", width=6, height = 6)
pRS <- ArrangePlots(pM$pRS, pB$pRS, pR$pRS, pA$pRS, posTagX = 0.3, posTagY = 0.9, TRUE)
ggsave(pRS, file="../../Results/Plots/Congruence_imputations/Continuous/RS.pdf", width=6, height = 6)
pDB <- ArrangePlots(pM$pDB, pB$pDB, NULL, pA$pDB, posTagX = 0.3, posTagY = 0.9, FALSE)
ggsave(pDB, file="../../Results/Plots/Congruence_imputations/Continuous/DB.pdf", width=6, height = 6)
rm(pA,pR,pM,pB, pBM,pLCS,pLG,pHB,pRS,pDB)
pM <- Plot_cat(All_Mammals,Coll_Mammals, TRUE)
pB <- Plot_cat(All_Birds,Coll_Birds, TRUE)
pR <- Plot_cat(All_Reptiles,Coll_Reptiles, TRUE)
pA <- Plot_cat(All_Amphibians,Coll_Amphibians, TRUE)
pDA <- ArrangePlots(pM$pDA, pB$pDA, pR$pDA, pA$pDA, 0.3,0.9, TRUE)
ggsave(pDA, file="../../Results/Plots/Congruence_imputations/Categorical/DA.pdf", width=6, height = 6)
pSp <- ArrangePlots(pM$pSP, pB$pSP, pR$pSP, pA$pSP, 0.3,0.9, TRUE)
ggsave(pSp, file="../../Results/Plots/Congruence_imputations/Categorical/Sp.pdf", width=6, height = 6)
pTL <- ArrangePlots(pM$pTL, pB$pTL, pR$pTL, pA$pTL, 0.3,0.9, TRUE)
ggsave(pTL, file="../../Results/Plots/Congruence_imputations/Categorical/TL.pdf", width=6, height = 6)
pPD <- ArrangePlots(pM$pPD, pB$pPD, NULL, pA$pPD, 0.3,0.9, FALSE)
ggsave(pPD, file="../../Results/Plots/Congruence_imputations/Categorical/PD.pdf", width=6, height = 6)
Func <- function(X) {
L <- length(unique(as.character(X)))
if(L==1) {return("similar")}
else{return("contradicting")}
}
DF <- Congruence(List_results, Collected, TraitName)
DF$Outcome <- apply(DF[, c(2:9)], 1, Func)
## Barplot of outcomes
ToPlot <-  with(DF, table(Outcome, Phylo_info)) %>%
as.data.frame() %>%
group_by(Phylo_info) %>%
mutate(prop=Freq/sum(Freq)*100) %>%
setNames(., c("outcome", "Phylo_info", "freq","prop")) %>%
as.data.frame()
# Assess which agree and which disagree, and barplot
Congruence_cat <- function(List_results, Collected, TraitName, AxisX){
GGPoptions <- theme_classic() + theme(
panel.border = element_rect(colour = "black", fill=NA),
text = element_text(size=13, family="serif"),
axis.text.x = element_text(color="black", margin=ggplot2::margin(10,0,2,0,"pt"), size=12),
axis.text.y = element_text(color="black", margin=ggplot2::margin(0,10,0,0,"pt"), size=12),
axis.ticks.length=unit(-0.1, "cm"),
legend.text=element_text(size=13))
Func <- function(X) {
L <- length(unique(as.character(X)))
if(L==1) {return("similar")}
else{return("contradicting")}
}
DF <- Congruence(List_results, Collected, TraitName)
DF$Outcome <- apply(DF[, c(2:9)], 1, Func)
## Barplot of outcomes
ToPlot <-  with(DF, table(Outcome, Phylo_info)) %>%
as.data.frame() %>%
group_by(Phylo_info) %>%
mutate(prop=Freq/sum(Freq)*100) %>%
setNames(., c("outcome", "Phylo_info", "freq","prop")) %>%
as.data.frame()
ToPlot <- ToPlot[order(ToPlot$prop),]
ToPlot$Phylo_info <- factor(ToPlot$Phylo_info, levels=c("NO", "YES"), labels=c("without", "with"))
p <- ggplot(ToPlot, aes(outcome, prop, fill=Phylo_info)) +
GGPoptions +
geom_bar(stat="identity", position="dodge") +
xlab(AxisX) + ylab("% species") +
scale_fill_discrete(name = "Phylogenetic information") +
geom_text(
aes(label = ToPlot$freq, y = prop + 0.05),
position = position_dodge(0.9),
vjust = -0.5
) + ylim(0,105)
return(p)
}
pM <- Plot_cat(All_Mammals,Coll_Mammals, TRUE)
pB <- Plot_cat(All_Birds,Coll_Birds, TRUE)
pR <- Plot_cat(All_Reptiles,Coll_Reptiles, TRUE)
pA <- Plot_cat(All_Amphibians,Coll_Amphibians, TRUE)
pDA <- ArrangePlots(pM$pDA, pB$pDA, pR$pDA, pA$pDA, 0.3,0.9, TRUE)
ggsave(pDA, file="../../Results/Plots/Congruence_imputations/Categorical/DA.pdf", width=6, height = 6)
pSp <- ArrangePlots(pM$pSP, pB$pSP, pR$pSP, pA$pSP, 0.3,0.9, TRUE)
ggsave(pSp, file="../../Results/Plots/Congruence_imputations/Categorical/Sp.pdf", width=6, height = 6)
pTL <- ArrangePlots(pM$pTL, pB$pTL, pR$pTL, pA$pTL, 0.3,0.9, TRUE)
ggsave(pTL, file="../../Results/Plots/Congruence_imputations/Categorical/TL.pdf", width=6, height = 6)
pPD <- ArrangePlots(pM$pPD, pB$pPD, NULL, pA$pPD, 0.3,0.9, FALSE)
ggsave(pPD, file="../../Results/Plots/Congruence_imputations/Categorical/PD.pdf", width=6, height = 6)
rm(pA,pR,pM,pB, pDA,pSp,pTL,pPD)
## Imputation errors
Reptiles_errors
View(Reptiles_errors)
## Imputation errors
Reptiles_errors[[1]]
## Imputation errors
Reptiles_errors[[1]] %>% as.data.frame()
## Imputation errors
Reptiles_errors[[1]] %>% as.data.frame() %>% t()
colnames(All_Reptiles[[1]])
View(Imputed)
library(parallel)
# ## Preamble
`%nin%` <- Negate(`%in%`)
source("Functions_for_missForest_imputations.R")
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Reptiles.csv")
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
Taxinfo <- "Order"
# Traits_cont_st <-  c("log10_Body_mass_g", "log10_Longevity_d", "log10_Litter_size", "sqrt_Diet_breadth",
#                   "Range_size_m2", "sqrt_Habitat_breadth_IUCN")
Traits_cont <-  c("Body_mass_g", "Longevity_d", "Litter_size", "Diet_breadth",
"Range_size_m2", "Habitat_breadth_IUCN")
Traits_cat <- c(Habitat, "Specialisation",
"Diel_activity","Trophic_level", Diet, "Primary_diet")
MammalsCont <- c(Traits_cont, "Generation_length_d", "Adult_svl_cm")
BirdsCont <- Traits_cont
ReptilesCont <- c(Traits_cont, "Adult_svl_cm", "Maturity_d")
AmphibiansCont <- c(Traits_cont, "Body_length_mm")
## Function arguments as lists, nested into one bigger list - each of these list elements are agurments for the function Imputations_missForest
DF.TraitsList <- list(M=Mammals, B=Birds, R=Reptiles, A=Amphibians)
#DF.TraitsList_st <- list(M=Mammals_st, B=Birds_st, R=Reptiles_st, A=Amphibians_st)
Taxinfo.List <- list(M="Order", B="Order", R="Order", A="Order")
#Cont.TraitsList_st <- list(M=MammalsCont_st, B=BirdsCont_st, R=ReptilesCont_st, A=AmphibiansCont_st)
Cont.TraitsList <- list(M=MammalsCont, B=BirdsCont, R=ReptilesCont, A=AmphibiansCont)
Cat.TraitsList <- list(M=Traits_cat, B=Traits_cat, R=Traits_cat[Traits_cat %nin% Diet], A=Traits_cat)
EV.List <- list(M="EV_1", B="EV_1", R="EV_1", A="EV_1")
ErrorTrue.List <- list(M=TRUE, B=TRUE, R=TRUE, A=TRUE)
DietTRUE.List <- list(M=TRUE, B=TRUE, R=FALSE, A=TRUE)
#std.
ArgumentsList <- list(TraitDF=DF.TraitsList,
Taxinfo=Taxinfo.List,
Traits_cont=Cont.TraitsList,
Traits_cat=Cat.TraitsList,
EV=EV.List,
ErrorTrue=ErrorTrue.List,
DietTRUE=DietTRUE.List,
std=std.List)
#std.List_st <- list(M=TRUE, B=TRUE, R=TRUE, A=TRUE)
std.List <- list(M=FALSE, B=FALSE, R=FALSE, A=FALSE)
ArgumentsList <- list(TraitDF=DF.TraitsList,
Taxinfo=Taxinfo.List,
Traits_cont=Cont.TraitsList,
Traits_cat=Cat.TraitsList,
EV=EV.List,
ErrorTrue=ErrorTrue.List,
DietTRUE=DietTRUE.List,
std=std.List)
Func <- function(X) {
names(X) <- Diet
ToPaste <- names(X)[which(X==1)]
return(paste(ToPaste, collapse = "|"))
}
Imputations_missForest <- function (TraitDF, Taxinfo, Traits_cont, Traits_cat, EV, ErrorTrue, DietTRUE, std) {
## Select traits of interest, to impute, and phylogenetic eigenvectors, and taxinfo
To_impute <- TraitDF[, colnames(TraitDF) %in% c(Taxinfo, Traits_cont, Traits_cat, EV)]
rownames(To_impute) <- TraitDF$Best_guess_binomial
## Set habitat and diet variables as binary (TRUE for 1 and FALSE for 0)
## Set class as numeric for all continuous traits
To_impute[, Traits_cont] <- apply(To_impute[, Traits_cont], 2, as.numeric)
## Set habitat and diet variables as factors. Otherwise, when they are numeric or logical, outputs are numeric
if(DietTRUE){
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
for (i in Diet) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
}
Habitat <- c("Forest","Savanna","Shrubland","Grassland","Wetland","Rocky.areas","Caves.and.subterranean",
"Desert","Marine","Marine.intertidal.or.coastal.supratidal",
"Artificial","Introduced.vegetation","Other.Unknown")
for (i in Habitat) {
To_impute[,i] <- factor(To_impute[,i], levels=c(0,1))
}
## Impute missing values
print("Imputing missing values.")
if (isTRUE(ErrorTrue)) { R.Imputed <- missForest(To_impute, variablewise = TRUE) }
else { R.Imputed <- missForest(To_impute, variablewise = FALSE) }
Imputed <- R.Imputed$ximp
Errors <- R.Imputed$OOBerror
## Select traits and variables of interest after imputations
if(DietTRUE) {
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level", "Primary_diet", Diet)
}
else{
Continuous <- unique(c(colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))])))
Categorical <- c(Habitat, "Specialisation", "Diel_activity","Trophic_level")
}
Imputed$Best_guess_binomial <- rownames(Imputed)
Imputed <- Imputed[order(Imputed$Best_guess_binomial), c(Taxinfo, "Best_guess_binomial", Continuous, Categorical, "EV_1")]
## Add a column for phylogenetic information (yes or no)
Imputed$Phylo_info <- TraitDF$EV_1
Imputed$Phylo_info[!is.na(Imputed$Phylo_info)] <- "YES"
Imputed$Phylo_info[is.na(Imputed$Phylo_info)] <- "NO"
## Add taxonomic information
Imputed$Class <- TraitDF$Class
Imputed$Order <- TraitDF$Order
Imputed$Family <- TraitDF$Family
Imputed$Genus <- TraitDF$Genus
## Reprocess Primary diet and diet breadth (sqrt + normalise) if diet is included
## Then reorder columns.
if(DietTRUE){
Func <- function(X) {
names(X) <- Diet
ToPaste <- names(X)[which(X==1)]
return(paste(ToPaste, collapse = "|"))
}
# Reprocess primary diet, for comparison with imputed values
Imputed$Primary_diet_reprocessed <- apply(Imputed[,Diet], 1, Func)
# Imputed$Primary_diet_reprocessed[Imputed$Primary_diet_reprocessed==""] <- "OM"
# Reprocess diet breadth, for comparison with imputed values
Imputed[, Diet] <- apply(Imputed[, Diet], 2, as.numeric)
Imputed$Diet_breadth_reprocessed <- apply(Imputed[, Diet], 1, sum, na.rm=T)
if(std) {
Imputed$Diet_breadth_reprocessed <- sqrt(Imputed$Diet_breadth_reprocessed)
Imputed$Diet_breadth_reprocessed <- scale(Imputed$Diet_breadth_reprocessed, center = TRUE, scale = TRUE)
colnames(Imputed)[colnames(Imputed)=="Diet_breadth_reprocessed"] <- "sqrt_Diet_breadth_reprocessed"
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
else {
Diet <- c("IN", "VE", "PL", "SE", "NE", "FR")
Imputed$Primary_diet <- NA
Imputed$Primary_diet_reprocessed <- NA
Imputed$IN <- NA
Imputed$VE <- NA
Imputed$SE <- NA
Imputed$FR <- NA
Imputed$NE <- NA
Imputed$PL <- NA
if (std) {
Imputed$sqrt_Diet_breadth <- NA
Imputed$sqrt_Diet_breadth_reprocessed <- NA
}
else{
Imputed$Diet_breadth <- NA
Imputed$Diet_breadth_reprocessed <- NA
}
## Rearrange columns
Imputed <- Imputed[, unique(c("Class","Order", "Family", "Genus", "Best_guess_binomial",
colnames(Imputed[grepl("Body_mass_g", colnames(Imputed))]),
colnames(Imputed[grepl("Longevity_d", colnames(Imputed))]),
colnames(Imputed[grepl("Litter_size", colnames(Imputed))]),
colnames(Imputed[grepl("Range_size_m2", colnames(Imputed))]),
"Diel_activity",
"Trophic_level",
colnames(Imputed[grepl("Diet_breadth", colnames(Imputed))]),
colnames(Imputed[grepl("Diet_breadth_reprocessed", colnames(Imputed))]),
"Primary_diet",
colnames(Imputed[grepl("Primary_diet_reprocessed", colnames(Imputed))]),
Diet,
"Specialisation",
colnames(Imputed[grepl("Habitat_breadth_IUCN", colnames(Imputed))]),
Habitat,
"Phylo_info"))]
}
rownames(Imputed) <- c(1:nrow(Imputed))
## Return
browser()
ToReturn <- list(Imputed.Dataset=Imputed, Imputation.errors=Errors)
ToReturn <- list(ToReturn)
return(ToReturn)
}
## Function to apply in parallel (runs the above function Imputations_missForest)
To_apply_parallel_imputations <- function (List_of_arguments) {
## NB: which function to use here on windows to replace pbmapply (or mapply)?
## mapply only works with forking methods (unix or linux)
Imputations_results <- pbmapply (FUN=Imputations_missForest,
TraitDF=List_of_arguments[["TraitDF"]],
Taxinfo=List_of_arguments[["Taxinfo"]],
Traits_cont=List_of_arguments[["Traits_cont"]],
Traits_cat=List_of_arguments[["Traits_cat"]],
EV=List_of_arguments[["EV"]],
ErrorTrue=List_of_arguments[["ErrorTrue"]],
DietTRUE=List_of_arguments[["DietTRUE"]],
std=List_of_arguments[["std"]])
return (Imputations_results)
}
Test <- To_apply_parallel_imputations(ArgumentsList)
library(dplyr)
library(phytools)
library(missForest)
library(pbmcapply)
library(pbapply)
Test <- To_apply_parallel_imputations(ArgumentsList)
Mammals <- Mammals[c(1:15),]
Birds <- Birds[c(1:15),]
Amphibians <- Amphibians[c(1:15),]
Reptiles <- Reptiles[c(1:15),]
DF.TraitsList <- list(M=Mammals, B=Birds, R=Reptiles, A=Amphibians)
ArgumentsList <- list(TraitDF=DF.TraitsList,
Taxinfo=Taxinfo.List,
Traits_cont=Cont.TraitsList,
Traits_cat=Cat.TraitsList,
EV=EV.List,
ErrorTrue=ErrorTrue.List,
DietTRUE=DietTRUE.List,
std=std.List)
Test <- To_apply_parallel_imputations(ArgumentsList)
Errors
View(Imputed)
## Imputation results congruence for each class, with and without phylogenetic information
library(reshape)
library(ggplot2)
library(dplyr)
library(ggpubr)
source("Functions_for_results_congruence.R")
## Load imputed datasets (8)
Imputed <- readRDS("../../Results/2.Imputed_trait_datasets/Imputed_not_standardised/List_of_8_sets.rds")
## Load data before imputations
Coll_Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Amphibians.csv")
Coll_Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Reptiles.csv")
Coll_Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Mammals.csv")
Coll_Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Birds.csv")
## Amphibians
All_Amphibians <- Get_all_results(Imputed, "A")$Results
Amphibians_errors <- Get_all_results(Imputed, "A")$Errors
## Reptiles
All_Reptiles <- Get_all_results(Imputed, "R")$Results
Reptiles_errors <- Get_all_results(Imputed, "R")$Errors
## Mammals
All_Mammals <- Get_all_results(Imputed, "M")$Results
Mammals_errors <- Get_all_results(Imputed, "M")$Errors
## Birds
All_Birds <- Get_all_results(Imputed, "B")$Results
Birds_errors <- Get_all_results(Imputed, "B")$Errors
## Imputation errors
Reptiles_errors[[1]] %>% as.data.frame() %>% t()
colnames(All_Reptiles[[1]])
Reptiles_errors[[1]]
names(Reptiles_errors[[1]])
## Code is parallelised
library(parallel)
## START CLUSTER
Cluster <- makeCluster(detectCores())
## EXCECUTE ANY PRE PROCESSING CODE NECESSARY
clusterEvalQ(Cluster, {
library(dplyr)
library(phytools)
library(picante)
library(geiger)
})
# Function to format phylogeny tip labels (from Genus_species to Genus species format)
.Format_tiplabels <- function (Phylogeny) {
Phylogeny$tip.label <- gsub("_", " ", Phylogeny$tip.label)
return(Phylogeny)
}
# Function to apply for continuous traits: PhySignal
PhySignal <- function(Traitdata, Names, Phylo) {
names(Traitdata) <- Names # names are binomial species names
Signal <- phytools::phylosig(Phylo, Traitdata, method="lambda", test = TRUE) %>%
unlist
return(Signal)
}
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Reptiles.csv")
# Load phylogenies
Phylo_Mammals <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Mammals.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Amphibians <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Amphibians.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Reptiles <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Reptiles.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Birds <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Birds.nwk") %>% .Format_tiplabels()  %>% compute.brlen()
## START CLUSTER
Cluster <- makeCluster(detectCores())
## EXCECUTE ANY PRE PROCESSING CODE NECESSARY
clusterEvalQ(Cluster, {
library(dplyr)
library(phytools)
library(picante)
library(geiger)
})
# Function to format phylogeny tip labels (from Genus_species to Genus species format)
.Format_tiplabels <- function (Phylogeny) {
Phylogeny$tip.label <- gsub("_", " ", Phylogeny$tip.label)
return(Phylogeny)
}
# Function to apply for continuous traits: PhySignal
PhySignal <- function(Traitdata, Names, Phylo) {
names(Traitdata) <- Names # names are binomial species names
Signal <- phytools::phylosig(Phylo, Traitdata, method="lambda", test = TRUE) %>%
unlist
return(Signal)
}
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Reptiles.csv")
Phylo_Mammals <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Mammals.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Amphibians <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Amphibians.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Reptiles <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Reptiles.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Birds <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Birds.nwk") %>% .Format_tiplabels()  %>% compute.brlen()
clusterEvalQ(Cluster, {
library(dplyr)
library(phytools)
library(picante)
library(geiger)
})
# Read trait data
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Reptiles.csv")
# Load phylogenies
Phylo_Mammals <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Mammals.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Amphibians <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Amphibians.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Reptiles <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Reptiles.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Birds <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Birds.nwk") %>% .Format_tiplabels()  %>% compute.brlen()
library(dplyr)
# Read trait data
Mammals <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Mammals.csv")
Birds <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Birds.csv")
Amphibians <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Amphibians.csv")
Reptiles <- read.csv("../../Results/1.Traits_before_imputations/With_taxonomic_correction/All_species/3.with_phylo_eigenvectors/Reptiles.csv")
# Load phylogenies
Phylo_Mammals <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Mammals.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Amphibians <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Amphibians.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Reptiles <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Reptiles.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Birds <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Birds.nwk") %>% .Format_tiplabels()  %>% compute.brlen()
# Traits
library(phytools)
Phylo_Mammals <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Mammals.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Amphibians <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Amphibians.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Reptiles <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Reptiles.nwk") %>% .Format_tiplabels() %>% compute.brlen()
Phylo_Birds <- read.newick("../../Results/1.Phylogenies/Corrected/2.Dropped_tips/Birds.nwk") %>% .Format_tiplabels()  %>% compute.brlen()
# Traits
Continuous.Traits <- c("Body_mass_g",
"Longevity_d",
"Litter_size",
"Diet_breadth",
"Range_size_m2",
"Habitat_breadth_IUCN")
Categorical.Traits <- c("Specialisation",
"Trophic_level",
"Diel_activity",
"Primary_diet")
Names.Mammals <- Mammals$Best_guess_binomial
Names.Birds <- Birds$Best_guess_binomial
Names.Reptiles <- Reptiles$Best_guess_binomial
Names.Amphibians <- Amphibians$Best_guess_binomial
## Export variables in all clusters
clusterExport(cl=Cluster, list(".Format_tiplabels","PhySignal", "PhySignal_Cat",
"Mammals", "Birds", "Reptiles", "Amphibians",
"Phylo_Mammals", "Phylo_Birds", "Phylo_Reptiles", "Phylo_Amphibians",
"Continuous.Traits", "Categorical.Traits",
"Names.Mammals", "Names.Birds", "Names.Reptiles", "Names.Amphibians"), envir=environment())
## Export variables in all clusters
clusterExport(cl=Cluster, list(".Format_tiplabels","PhySignal", #"PhySignal_Cat",
"Mammals", "Birds", "Reptiles", "Amphibians",
"Phylo_Mammals", "Phylo_Birds", "Phylo_Reptiles", "Phylo_Amphibians",
"Continuous.Traits", "Categorical.Traits",
"Names.Mammals", "Names.Birds", "Names.Reptiles", "Names.Amphibians"), envir=environment())
# Phylogenetic signal in continuous traits
Lambda_Mammals_continuous <- parApply(Cluster, Mammals[, Continuous.Traits], 2, PhySignal, Names=Names.Mammals, Phylo=Phylo_Mammals)
Lambda_Mammals_continuous
## Save files
write.table(Lambda_Mammals_continuous, "../../Results/1.Traits_before_imputations/Phylogenetic_signal/ContinuousMammals.txt",
sep = " ", dec = ".", row.names = TRUE, col.names = TRUE)
Lambda_Mammals_continuous %>% as.data.frame()
Lambda_Mammals_continuous <- Lambda_Mammals_continuous %>% as.data.frame()
View(Lambda_Mammals_continuous)
## Save files
write.csv(Lambda_Mammals_continuous, "../../Results/1.Traits_before_imputations/Phylogenetic_signal/ContinuousMammals.csv",row.names = FALSE)
Lambda_Birds_continuous <- system.time(parApply(Cluster, Birds[, Continuous.Traits], 2, PhySignal, Names=Names.Birds, Phylo=Phylo_Birds)%>% as.data.frame())
Lambda_Birds_continuous
